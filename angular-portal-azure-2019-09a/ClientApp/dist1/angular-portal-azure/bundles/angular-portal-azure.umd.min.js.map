{"version":3,"sources":["ng://angular-portal-azure/lib/domain/dashboard/tile/tile-sizes.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tile-size.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tiles.ts","ng://angular-portal-azure/lib/domain/dashboard/appboard/appboard.ts","ng://angular-portal-azure/lib/domain/sidebar/sidebar.ts","ng://angular-portal-azure/lib/domain/app-config.ts","ng://angular-portal-azure/lib/service/app-config/app-config.service.ts","ng://angular-portal-azure/lib/domain/exception-dot-net.ts","ng://angular-portal-azure/lib/domain/exception.ts","ng://angular-portal-azure/lib/domain/user-control-base.ts","ng://angular-portal-azure/lib/domain/blade.ts","ng://angular-portal-azure/lib/domain/area-blades.ts","ng://angular-portal-azure/lib/domain/area-notification.ts","ng://angular-portal-azure/lib/domain/user-account.ts","ng://angular-portal-azure/lib/domain/avatar-menu.ts","ng://angular-portal-azure/lib/domain/tile-sizes.ts","ng://angular-portal-azure/lib/domain/tile-size.ts","ng://angular-portal-azure/lib/domain/tiles.ts","ng://angular-portal-azure/lib/domain/startboard.ts","ng://angular-portal-azure/lib/domain/panorama.ts","ng://angular-portal-azure/lib/domain/portal-service.ts","ng://angular-portal-azure/lib/service/blade/blade.service.ts","ng://angular-portal-azure/lib/service/injector/injector.service.ts","ng://angular-portal-azure/lib/service/app/app.service.ts","ng://angular-portal-azure/lib/domain/base/user-control-base.ts","ng://angular-portal-azure/lib/service/browser/viewport.ts","ng://angular-portal-azure/lib/service/browser/browser.service.ts","ng://angular-portal-azure/lib/domain/blade/blade.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tile.ts","ng://angular-portal-azure/lib/domain/dashboard/appboard/appboard-entry.ts","ng://angular-portal-azure/lib/domain/sidebar/sidebar-entry.ts","ng://angular-portal-azure/lib/domain/tile.ts","ng://angular-portal-azure/lib/component/app/app.component.ts","ng://angular-portal-azure/lib/component/blade/blade.component.ts","ng://angular-portal-azure/lib/component/grid/grid.component.ts","ng://angular-portal-azure/lib/component/nav/nav.component.ts","ng://angular-portal-azure/lib/component/dashboard/appboard/appboard.component.ts","ng://angular-portal-azure/lib/component/general/page-not-found/page-not-found.component.ts","ng://angular-portal-azure/lib/app-routing.module.ts","ng://angular-portal-azure/lib/component/general/splash-screen/splash-screen.component.ts","ng://angular-portal-azure/lib/directive/router-outlet-named/router-outlet-named.directive.ts","ng://angular-portal-azure/lib/directive/theming/theming.directive.ts","ng://angular-portal-azure/lib/angular-portal-azure.module.ts"],"names":["small","mini","normal","herowide","TileSize","tileSizes","width","height","this","getTileSizes","Array","push","TileSizes","Tiles","tiles","_i","arguments","length","_this","_super","apply","__spread","isShowTiles","isTilesLoaded","hideTileIfOnlyOne","nextLeft","nextTop","columnHeightMax","__extends","create","Object","prototype","forEach","tile","processTile","Appboard","appboardEntries","__spread$1","isVisible","object","Sidebar","sidebarEntries","__spread$2","AppConfig","appTitle","isShowSplashScreen","username","usernameTenant","appboard","blades","sidebar","AppConfigService","appConfig","Injectable","args","providedIn","ExceptionDotNet","ArgumentNullException","EntityValidationException","ValidationsExceptionDotNet","Exception","getOneLineMessage","exception","message","undefined","Message","toLowerCase","indexOf","console","debug","innerException","InnerException","Messages","item","index","ExceptionMessage","prepareException","response","createException","data","Data","processResponseData","json","_body","body","JSON","parse","Url","url","Status","status","StatusText","statusText","i","UserControlBase","portalService","statusBar","statusBarClass","$onDestroy","removeWindowResizeListener","ngOnDestroy","onActivate","onActivated","windowResizeHandler","$window","removeEventListener","setupWindowResizeListener","callback","id","window","addEventListener","clearTimeout","setTimeout","isNumberUndefinedNullOr0","value","isObjectNullUndefinedOrEmpty","keys","isStringNullOrEmpty","replace","getRandomString","Math","round","pow","random","toString","slice","clearStatusBar","setStatusBar","text","style","setStatusBarCopyData","setStatusBarLoadData","setStatusBarSaveData","setStatusBarDeleteData","setStatusBarDeleteDataCanceled","setStatusBarInfo","setStatusBarError","setStatusBarNoDataFound","setStatusBarException","Blade","path","title","subtitle","call","vm","isMaximize","isCommandMore","isNav","isGrid","visibility","subTitle","widthStackLayout","isInnerHtml","isCommandBrowse","isCommandBrowseEnabled","commandBrowse","onCommandBrowse","commandBrowseText","isCommandCancel","isCommandCancelEnabled","commandCancel","onCommandCancel","commandCancelText","isCommandCopy","isCommandCopyEnabled","commandCopy","onCommandCopy","commandCopyText","isCommandDelete","isCommandDeleteEnabled","commandDelete","onCommandDelete","commandDeleteText","isCommandDocument","isCommandDocumentEnabled","commandDocument","onCommandDocument","commandDocumentText","isCommandDocument2","isCommandDocument2Enabled","commandDocument2","onCommandDocument2","commandDocument2Text","isCommandDocument3","isCommandDocument3Enabled","commandDocument3","onCommandDocument3","commandDocument3Text","isCommandDocument4","isCommandDocument4Enabled","commandDocument4","onCommandDocument4","commandDocument4Text","isCommandDocument5","isCommandDocument5Enabled","commandDocument5","onCommandDocument5","commandDocument5Text","isCommandNew","isCommandNewEnabled","commandNew","onCommandNew","commandNewText","isCommandOrder","isCommandOrderEnabled","commandOrder","onCommandOrder","commandOrderText","isCommandRestart","isCommandRestartEnabled","commandRestart","onCommandRestart","commandRestartText","isCommandSave","isCommandSaveEnabled","commandSave","onCommandSave","commandSaveText","isCommandSearch","isCommandSearchEnabled","commandSearch","onCommandSearch","commandSearchText","isCommandStart","isCommandStartEnabled","commandStart","onCommandStart","commandStartText","isCommandStop","isCommandStopEnabled","commandStop","onCommandStop","commandStopText","isCommandSwap","isCommandSwapEnabled","commandSwap","onCommandSwap","commandSwapText","isCommandExcel","isCommandExcelEnabled","commandExcel","onCommandExcel","commandExcelText","Error","areaBlades","blade","setBladeHeights","defineProperty","_path","newPath","activate","navigateTo","onNavigateTo","comparePaths","path1","path2","close","onClose","clearPath","setTitle","watchExpression","func","log","bladeContentHeight","innerHeight","bladeContentHeightInner","AreaBlades","portalScroll","document","getElementById","setPortalScrollCss","raiseBladeOnActivateEvent","raiseAddBladeEvent","isBladeAlreadyShown","addBlade","pathSender","setFirstBlade","clearAll","hidePanorama","senderPath","portalcontent","clearChild","azureportalblades","getElementsByClassName","offsetLeft","sl","scrollLeft","showPanoramaIfNoBlades","isremoved","some","areaNotification","hide","clearLevel","level","clearLastLevel","panorama","startboard","showTiles","addBladeListener","areaNotificationShowListener","areaNotificationHideListener","marginRight","widthAreaUsed","AreaNotification","_width","_backgroundColor","calcualteCssStyles","onHide","display","show","onShow","onShowed","position","top","backgroundColor","borderLeft","left","innerWidth","UserAccount","firstName","lastName","userName","_firstName","_name","_lastName","AvatarMenu","userAccount","TileSize$1","Tiles$1","addTile","tileSize","size","Startboard","Panorama","avatarMenu","PortalService","parameter","action","itemId","BladeService","appConfigService","router","appService","bladeId","events","pipe","filter","event","NavigationStart","subscribe","fixRouterConfigBladeOutlet","handleRestoreStateEventForBlades","groupEnd","routerToPath","isRouteMatchFound","config","routeConfig","outletId","outlet","navigate","outlets","_a","outlet1","substring","restoredState","pop","Router","AppService","InjectorService","setInjector","injector","getInjector","bladeService","Injector","UserControlBase$1","Viewport","fixedHeight","dynamicHeight","setBrowserWindow","browserWindow","browserWindowInnerHeight","browserWindowInnerWidth","addFixedHeight","group","BrowserService","viewport","_bladeId","browserService","get","onResize","ngOnInit","Tile","bladePath","_bladePath","newBladePath","clicked","AppboardEntry","routerPath","iconClass","iconColor","SidebarEntry","Tile$1","AppComponent","themeProps","themes","black","--topbar-color","--topbar-background-color","--topbar-home-color","--blade-statusbar-background-color","--blade-commands-background-color","white","selectedTheme","setTheme","themeIndex","Component","selector","template","BladeComponent","GridComponent","NavComponent","AppboardComponent","PageNotFoundComponent","routes","redirectTo","pathMatch","component","AppRoutingModule","NgModule","imports","RouterModule","forRoot","exports","SplashScreenComponent","RouterOutletNamedDirective","parentContexts","location","resolver","changeDetector","RouterOutlet","name","Directive","exportAs","ChildrenOutletContexts","ViewContainerRef","ComponentFactoryResolver","ChangeDetectorRef","Input","ThemingDirective","el","ngOnChanges","theme","prop","nativeElement","setProperty","ElementRef","AngularPortalAzureModule","parentModule","ngModule","providers","provide","useValue","declarations","CommonModule","FormsModule","decorators","type","Optional","SkipSelf"],"mappings":"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","sourcesContent":["/** The names are used in CSS for layouting, e.g. style='mini' */\r\nexport enum TileSizes {\r\n    small,\r\n    mini,\r\n    normal,\r\n    herowide\r\n}\r\n","import { TileSizes } from './tile-sizes';\r\n\r\nexport class TileSize {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public tileSizes: TileSizes, public width: number, public height: number) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Static Methods\r\n\r\n    static getTileSizes(): Array<TileSize> {\r\n        let tileSizes = Array<TileSize>();\r\n\r\n        tileSizes.push(new TileSize(TileSizes.small, 90, 90));\r\n        tileSizes.push(new TileSize(TileSizes.mini, 180, 90));\r\n        tileSizes.push(new TileSize(TileSizes.normal, 180, 180));\r\n        tileSizes.push(new TileSize(TileSizes.herowide, 540, 360));\r\n\r\n        return tileSizes;\r\n    }\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Tile } from './tile';\r\nimport { TileSize } from './tile-size';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tiles<T extends Tile> extends Array<T>  {\r\n    // #region Properties\r\n\r\n    //tiles: Array<T> = new Array<T>();\r\n    isShowTiles: boolean = true;\r\n    isTilesLoaded: boolean = false;\r\n    hideTileIfOnlyOne: boolean = true;  // not yet evaluated in HTML, but this is the standard behavior\r\n\r\n    tileSizes = TileSize.getTileSizes();\r\n    nextLeft: number = 0;\r\n    nextTop: number = 0;\r\n    columnHeightMax: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(...tiles: Array<T>) {\r\n        super(...tiles);\r\n        //this.tiles = tiles;\r\n    }\r\n\r\n    static create<Apps>(): Apps {\r\n        let object = Object.create(Tiles.prototype);\r\n        return object;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...tiles: Array<T>): number {\r\n        tiles.forEach((tile) => {\r\n            this.processTile(tile);\r\n        });\r\n\r\n        return super.push(...tiles);\r\n    }\r\n\r\n    processTile(tile: T): T {\r\n        return;\r\n        //this.isTilesLoaded = true;\r\n        let tileSize = this.tileSizes[tile.tileSize];\r\n        tile.size = TileSizes[tile.tileSize];  // Get CSS Name\r\n\r\n        tile.top = this.nextTop + 'px';\r\n        tile.left = this.nextLeft + 'px';\r\n\r\n        this.nextLeft += tileSize.width;\r\n\r\n        if (tileSize.height > this.columnHeightMax) {\r\n            this.columnHeightMax = tileSize.height;\r\n        }\r\n\r\n        if (this.nextLeft > 540) {\r\n            this.nextLeft = 0;\r\n            this.nextTop += this.columnHeightMax;\r\n            this.columnHeightMax = 0;\r\n        }\r\n\r\n        //this.tiles.push(tile);\r\n\r\n        return tile;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Tiles } from '../tile/tiles';\r\nimport { TileSize } from '../tile/tile-size';\r\nimport { AppboardEntry } from './appboard-entry';\r\n\r\nexport class Appboard extends Tiles<AppboardEntry> {\r\n    // #region Properties\r\n\r\n    isVisible: boolean = true;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(...appboardEntries: Array<AppboardEntry>) {\r\n        super(...appboardEntries);\r\n        this.tileSizes = TileSize.getTileSizes();\r\n        this.nextLeft = 0;\r\n        this.nextTop = 0;\r\n        this.columnHeightMax = 0;\r\n    }\r\n\r\n    static create<Appboard>(): Appboard {\r\n        let object = Object.create(Appboard.prototype);\r\n        object.tileSizes = TileSize.getTileSizes();\r\n        object.nextLeft = 0;\r\n        object.nextTop = 0;\r\n        object.columnHeightMax = 0;\r\n        return object;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...appboardEntries: Array<AppboardEntry>): number {\r\n        return super.push(...appboardEntries);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { SidebarEntry } from './sidebar-entry';\r\n\r\nexport class Sidebar extends Array<SidebarEntry> {\r\n    // #region Properties\r\n\r\n    isVisible: boolean = true;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    private constructor(sidebarEntries?: Array<SidebarEntry>) {\r\n        super(...sidebarEntries);\r\n    }\r\n\r\n    static create<Sidebars>(): Sidebars {\r\n        return Object.create(Sidebar.prototype);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...sidebarEntries: Array<SidebarEntry>): number {\r\n        return super.push(...sidebarEntries);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Appboard } from \"./dashboard/appboard/appboard\";\r\nimport { Blade } from \"./blade/blade\";\r\n//import { Blades } from \"./blade/blades\";\r\nimport { Sidebar } from \"./sidebar/sidebar\";\r\n\r\nexport class AppConfig {\r\n    // #region Properties\r\n\r\n    appTitle: string = 'One-System Portal Azure';\r\n    isShowSplashScreen: boolean = true;\r\n    username: string = 'user@one-system.domain';\r\n    usernameTenant: string = 'One-System';\r\n\r\n    appboard: Appboard = Appboard.create();\r\n    blades: Blade[] = []; // Blades.create();\r\n    sidebar: Sidebar = Sidebar.create();\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor() {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { AppConfig } from '../../domain/app-config';\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class AppConfigService {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public appConfig: AppConfig) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","export class ValidationResultDotNet {\n    ErrorMessage: string;\n    MemberNames: string[];\n}\n\nexport class ExceptionDotNet {\n    // .NET Exception (the following fields are transmitted over the wire)\n    ClassName: string | void;\n    Data: { key: number, value: string }[] | null;\n    ExceptionMethod: string | void;\n    HelpURL: string | null | void;\n    HelpLink: string | null | void;\n    HResult: number;\n    InnerException: ExceptionDotNet | null;\n    Message: string | null;\n    RemoteStackIndex: number | void;\n    RemoteStackTraceString: string | null | void;\n    Source: string;\n    StackTrace: string;\n    WatsonBuckets: string | null | void;\n\n    /**\n     *  @deprecated ExceptionMessage is obsolete\n     */\n    ExceptionMessage: string | void;\n    /**\n     *  @deprecated ExceptionType is obsolete\n     */\n    ExceptionType: string | void;\n}\n\nexport class ArgumentNullException extends ExceptionDotNet {\n    ParamName: string;\n}\n\nexport class EntityValidationException extends ExceptionDotNet {\n    Data: { key: number, value: string }[];\n    ValidationResults: ValidationResultDotNet[];\n\n    //public convertResponse(response: any) {\n    //    if (response.headers === undefined) {\n    //        console.debug('EntityValidationException.convertResponse - response.data');\n    //        ValidationsExceptionDotNet.convertResponse(this, response.data);\n    //        ValidationsExceptionDotNet.convertExceptionType(this, response.data);\n    //    } else {\n    //        console.debug('EntityValidationException.convertResponse - response.json()');\n    //        ValidationsExceptionDotNet.convertResponse(this, response.json());\n    //        ValidationsExceptionDotNet.convertExceptionType(this, response.json());\n    //    }\n    //}\n\n    //protected static convertResponse(exceptionTo: EntityValidationException | ValidationsExceptionDotNet, responseDataFrom: ExceptionDotNet): void {\n    //    console.debug('EntityValidationException.convertResponse');\n\n    //    exceptionTo.ExceptionMessage = responseDataFrom.ExceptionMessage;\n    //    exceptionTo.Message = responseDataFrom.Message;\n    //    exceptionTo.StackTrace = responseDataFrom.StackTrace;\n    //    exceptionTo.InnerException = responseDataFrom.InnerException;\n    //}\n\n    //protected static convertExceptionType(exception: EntityValidationException | ValidationsExceptionDotNet, responseData: any): void {\n    //    if (responseData.ExceptionType === undefined) {\n    //        console.debug('EntityValidationException.convertExceptionType - undefined');\n    //        return;\n    //    }\n    //    else if (responseData.ExceptionType === 'System.Data.Entity.Validation.DbEntityValidationException') {\n    //        console.debug('EntityValidationException.convertExceptionType - DbEntityValidationException');\n    //        exception.ExceptionType = 'DbEntityValidationException';\n    //        return;\n    //    }\n    //    else if (responseData.ExceptionType === 'System.Data.Entity.Infrastructure.DbUpdateConcurrencyException') {\n    //        console.debug('EntityValidationException.convertExceptionType - DbUpdateConcurrencyException');\n    //        exception.ExceptionType = 'DbUpdateConcurrencyException';\n    //        return;\n    //    }\n    //    else if (responseData.ClassName !== undefined && responseData.ClassName.indexOf('ValidationsException') > 0) {\n    //        console.debug('EntityValidationException.convertExceptionType - ValidationsException');\n    //        exception.ExceptionType = 'ValidationsException';\n    //        return;\n    //    }\n    //    else {\n    //        console.debug('EntityValidationException.convertExceptionType - else');\n    //        exception.ExceptionType = responseData.ExceptionType;\n    //    }\n    //}\n}\n\n/**\n *  @deprecated ValidationsExceptionDotNet should be replaced by EntityValidationException\n */\nexport class ValidationsExceptionDotNet extends EntityValidationException {\n}\n","import { ValidationsExceptionDotNet } from './exception-dot-net';\n\nexport class Exception extends ValidationsExceptionDotNet {\n    // #region Properties\n\n    // HTTP Server\n    Type: string;\n    MessageDetail: string;\n    Messages: string[];\n    Status: number | undefined;\n    StatusText: string | undefined;\n    Url: string;\n\n    // #endregion\n\n    // #region Static Methods\n\n    static getOneLineMessage(exception: Exception): string {\n        let message: string = '';\n\n        if (exception.Message !== undefined) {\n            if (exception.Message.toLowerCase().indexOf('cannot insert duplicate key in object') >= 0\n                || exception.Message.toLowerCase().indexOf('the duplicate key value is') >= 0) {\n                console.debug(exception.Message);\n                return 'Datensatz mit gleichem Key (SchlÃÂ¼ssel) bereits vorhanden!';\n            }\n\n            if (exception.Message.toLowerCase().indexOf('the delete statement conflicted with the reference constraint') >= 0) {\n                console.debug(exception.Message);\n                return 'Datensatz kann nicht gelÃÂ¶scht werden, da noch abhÃÂ¤ngige Daten vorhanden sind!';\n            }\n\n            if (exception.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                // Frist innerException\n                let innerException = exception.InnerException;\n                if (exception.InnerException.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                    // Second innerException\n                    let innerException = exception.InnerException.InnerException;\n                    if (exception.InnerException.InnerException.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                        // Third innerException\n                        let innerException = exception.InnerException.InnerException.InnerException;\n                    }\n                }\n                console.debug(exception);\n                return innerException.Message;\n            }\n\n            message = message + exception.Message + ' ';\n            return message;\n        }\n\n        if (exception.Messages !== undefined) {\n            if (exception.Messages.length > 0) {\n                message = '';\n                exception.Messages.forEach((item, index) => {\n                    if (index > 0) {\n                        message = message + ' - ';\n                    }\n                    message = message + item;\n                });\n                return message;\n            }\n        }\n\n        if (exception.ExceptionMessage !== undefined && (<string>exception.ExceptionMessage).toLowerCase().indexOf('see the inner exception for details') < 0) {\n            message = message + ': ' + exception.ExceptionMessage + ' ';\n            return message;\n        }\n\n        if (exception.ExceptionMessage !== undefined && (<string>exception.ExceptionMessage).toLowerCase().indexOf('see the inner exception for details') >= 0) {\n            if (exception.InnerException !== undefined) {\n                if (exception.InnerException.InnerException !== undefined) {\n                    message = message + ': ' + exception.InnerException.InnerException.ExceptionMessage + ' ';\n                    return message;\n                } else {\n                    message = message + ': ' + exception.InnerException.ExceptionMessage + ' ';\n                    return message;\n                }\n            }\n        }\n\n        // Default handler\n        console.debug(exception);\n        message = message + ': JavaScript-Fehler oder Probleme mit der Internetverbindung. Weitere Informationen im Log (change log to full = debug). ' + exception;\n\n        return message;\n    }\n\n    // TODO:2018-10-10/hp: [angular.IHttpPromiseCallbackArg<Exception>] should be Response\n    static prepareException(response: Promise<Exception> | any): Exception {\n        let exception = Exception.createException();\n\n        // #region Process (Angular 1) response.data.Data\n\n        if (response.data !== undefined && response.data.Data !== undefined) {\n            exception = Exception.processResponseData(exception, response.data.Data);\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response.json().Data (EntityValidationException, etc.)\n\n        else if (response.json !== undefined && response.json().Data != undefined) {\n            exception = Exception.processResponseData(exception, response.json().Data);\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response._body\n\n        else if (response._body !== undefined) {\n            var body = JSON.parse(response._body);\n            if (body.Message) {\n                exception.Message = body.Message;\n            }\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response.InnerException.InnerException.Message\n\n        else if (response.json !== undefined && response.json !== null\n            && response.json().InnerException !== undefined && response.json().InnerException !== null\n            && response.json().InnerException.InnerException !== undefined && response.json().InnerException.InnerException !== null) {\n            exception.Message = response.json().InnerException.InnerException.Message;\n        }\n\n        // #endregion\n\n        //exception.convertResponse(response);\n\n        exception.Url = response.url;\n        exception.Status = response.status;\n        exception.StatusText = response.statusText;\n\n        return exception;\n    }\n\n    private static createException(): Exception {\n        let exception: Exception = new Exception();\n        exception.Messages = [];\n        return exception;\n    }\n\n    //private static processResponseWithData(exception: Exception, response: angular.IHttpPromiseCallbackArg<Exception>): Exception {\n    //    console.debug('Exception.processResponseWithData');\n    //    // #region Convert data to Messages\n\n    //    if (response.data.Data === undefined) {\n    //        exception.Messages.push('No further information found in [response.data.Data].');\n    //        exception.Messages.push('No further information found in [response.data.Data].');\n    //    } else {\n\n    //        let i = 1;\n    //        while (response.data.Data[i + ''] !== undefined) {\n    //            console.debug('Add to exception.Messages : ' + response.data.Data[i + '']);\n    //            exception.Messages.push(response.data.Data[i + '']);\n    //            i++;\n    //        }\n    //    }\n\n    //    // #endregion\n\n    //    return exception;\n    //}\n\n    private static processResponseData(exception: Exception, data: any[]): Exception {\n        let i = 1;\n        while (data[i + ''] !== undefined) {\n            exception.Messages.push(data[i + '']);\n            i++;\n        }\n\n        return exception;\n    }\n\n    // TODO:2017-01-09/hp: Implement this function for angular2\n    //private static processDotNetException2(exception: Exception, response: any): Exception {\n    //    console.debug('Exception.processDotNetException2');\n\n    //    if (response.json().data !== undefined) {\n    //        console.debug('[Exception.processDotNetException2] not implemented. Implement it to get proper exception data.');\n    //    }\n\n    //    return exception;\n    //}\n\n    // #endregion\n}\n","import { UserAccount } from './user-account';\nimport { PortalService } from './portal-service';\nimport { Exception } from './exception';\n\n\nexport class UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService) { // $scope: any,\n        //this.$scope = $scope;\n        this.portalService = portalService;\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    //$scope: any;\n    portalService: PortalService;\n\n    windowResizeHandler: () => void;\n\n    statusBar: string = '';\n    statusBarClass: string = '';\n\n    // #endregion\n\n    // #region Methods\n\n    /** angular1: $onInit(), $onChanges(changesObj), $doCheck(), $onDestroy(), $postLink() */\n    $onDestroy() {\n        this.removeWindowResizeListener();\n    }\n\n    /** angular2: ngOnChanges(), ngOnInit, ngDoCheck, ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy */\n    ngOnDestroy() {\n        this.removeWindowResizeListener();\n    }\n\n    /** Override */\n    onActivate(): void {\n    }\n\n    /** Override */\n    onActivated(): void {\n    }\n\n    private removeWindowResizeListener() {\n        if (this.windowResizeHandler !== undefined && this.portalService.$window) {\n            this.portalService.$window.removeEventListener('resize', this.windowResizeHandler);\n        }\n    }\n\n    setupWindowResizeListener(callback: () => void) {\n        // http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing\n        let id: number;\n\n        window.addEventListener('resize', this.windowResizeHandler = () => {\n            clearTimeout(id);\n            id = setTimeout(() => { callback(); }, 50);\n        });\n    }\n\n    isNumberUndefinedNullOr0(value: number): boolean {\n        if (value && value > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isObjectNullUndefinedOrEmpty(value: object): boolean {\n        if (value == null) { return true; }\n        if (value == undefined) { return true; }\n        if (value && Object.keys(value).length > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isStringNullOrEmpty(value: string): boolean {\n        if (value && value.replace(' ', '').length > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    getRandomString(length: number = 20) {\n        return 'a' + Math.round((Math.pow(36, length + 1) - Math.random() * Math.pow(36, length))).toString(36).replace('.', '').replace('(e+', '').replace(')', '').slice(1);\n    }\n\n    // #region Set StatusBar\n\n    clearStatusBar() {\n        this.statusBar = '';\n        this.statusBarClass = '';\n    }\n\n    setStatusBar(text?: string, style?: string) {\n        this.statusBar = text ? text : '';\n        this.statusBarClass = style ? style : '';\n    }\n\n    setStatusBarCopyData() {\n        this.statusBar = 'Daten kopieren...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarLoadData() {\n        this.statusBar = 'Daten laden...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarSaveData() {\n        this.statusBar = 'Daten speichern...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarDeleteData() {\n        this.statusBar = 'Daten lÃÆÃâÃâ Ã¢â¬â¢ÃÆÃ¢â¬Â ÃÂ¢Ã¢âÂ¬Ã¢âÂ¢ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬ÃÂ¢Ã¢â¬Å¾ÃÂ¢ÃÆÃâÃâ Ã¢â¬â¢ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬Ãâ¦ÃÂ¡ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ¡ÃÆÃ¢â¬Å¡ÃâÃÂ¶schen...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarDeleteDataCanceled() {\n        this.statusBar = 'LÃÆÃâÃâ Ã¢â¬â¢ÃÆÃ¢â¬Â ÃÂ¢Ã¢âÂ¬Ã¢âÂ¢ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬ÃÂ¢Ã¢â¬Å¾ÃÂ¢ÃÆÃâÃâ Ã¢â¬â¢ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬Ãâ¦ÃÂ¡ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ¡ÃÆÃ¢â¬Å¡ÃâÃÂ¶schen abgebrochen.';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarInfo(text: string) {\n        this.statusBar = text;\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarError(text: string) {\n        this.statusBar = text;\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    setStatusBarNoDataFound() {\n        this.statusBar = 'Keine Daten gefunden!';\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    setStatusBarException(exception: Exception) {\n        this.statusBar = Exception.getOneLineMessage(exception);\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    // #endregion\n\n    // #endregion\n}\n","import { PortalService } from './portal-service';\nimport { UserAccount } from './user-account';\nimport { UserControlBase } from './user-control-base';\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\nimport { timeout } from 'q';\r\n\nexport class Blade extends UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService, path: string, title: string, subtitle: string = '', width: number = 200) {//$scope: any,\n        super(portalService); //$scope,\n\n        this.vm = this;\n        this.path = path;\n        this.title = title;\n        this.subTitle = subtitle;\n        this.width.width = width + 'px';\n        this.widthStackLayout.width = width - 50 + 'px';  // 50 = padding (left and right)\n\n        if (!portalService) { throw new Error('[Blade] constructor parameter \\'portalService\\' must be provided.'); }\n        if (!path) { throw new Error('[Blade] constructor parameter \\'path\\' must be a string.'); }\n        if (!title && title !== '') { throw new Error('[Blade] constructor parameter \\'title\\' must be a string when provided.'); }\n        if (!subtitle && subtitle !== '') { throw new Error('[Blade] constructor parameter \\'subtitle\\' must be a string when provided.'); }\n        if (!width && width !== 0) { throw new Error('[Blade] constructor parameter \\'width\\' must be a number when provided.'); }\n\n        if (width < 50) { throw new Error('[Blade] constructor parameter \\'width\\' must be at least 50.'); }\n\n        // Set 'this.portalService.areaBlades.blades[index]' to 'this'\n        //     'this.portalService.areaBlades.blades[index]' was generated during AddBlade\n        this.portalService.areaBlades.blades.forEach((blade, index) => {\n            if (blade.path != null && this.path != null && blade.path.toLowerCase() === this.path.toLowerCase()) {\n                this.portalService.areaBlades.blades[index] = this;\n            }\n        });\n\n        this.setupWindowResizeListener(() => { this.setBladeHeights(); });\n        this.setBladeHeights();\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    /** HACK: 2016-11-06/hp\n    [angular-portal-blade] needs [this] as the controller.\n    We don't know how to provide [this] to the directive.\n    So we came up with this [vm] property.*/\n    vm: any = {};\n\n    // Indicates if maximize icon is shown\n    // TODO: 2019-09-26/hp: it probably should be named isMaximizedShown\n    isMaximize: boolean = false;\n\n    // TODO: 2019-09-26/hp: not sure what that is, checkout\n    isCommandMore: boolean = false;\n\n    // Indicates if this is a navigation blade\n    isNav: boolean = false;\n\n    // Indicates if this is a navigation grid blade\n    isGrid: boolean = false;\n\n    visibility: string = 'collapse';\n\n    private watcherTitle: () => void;\n\n    bladeContentHeight: number;\n    bladeContentHeightInner: number;\n\n    title: string = '';\n    subTitle: string = '';\n    width = { 'width': '0' };\n    widthStackLayout = { 'width': '50px' };\n\n    isInnerHtml: boolean = true;\n\n    formblade: any; // angular.IFormController; // name of the ng-form directive\n\n    // #region path\n\n    private _path: string;\n    get path(): string {\n        return this._path;\n    }\n    // For the moment we do distinguish between lower and upper case path name\n    set path(newPath: string) {\n        if (newPath == null) { return; }\n        this._path = newPath.toLowerCase();\n    }\n\n    // #endregion\n\n    // #endregion\n\n    // #region Commands\n\n    isCommandBrowse: boolean = false;\n    isCommandBrowseEnabled: boolean = true;\n    commandBrowse: () => void = () => { this.onCommandBrowse(); };\n    commandBrowseText: string = '';\n\n    isCommandCancel: boolean = false;\n    isCommandCancelEnabled: boolean = true;\n    commandCancel: () => void = () => { this.onCommandCancel(); };\n    commandCancelText: string = '';\n\n    isCommandCopy: boolean = false;\n    isCommandCopyEnabled: boolean = true;\n    commandCopy: () => void = () => { this.onCommandCopy(); };\n    commandCopyText: string = '';\n\n    isCommandDelete: boolean = false;\n    isCommandDeleteEnabled: boolean = true;\n    commandDelete: () => void = () => { this.onCommandDelete(); };\n    commandDeleteText: string = '';\n\n    isCommandDocument: boolean = false;\n    isCommandDocumentEnabled: boolean = true;\n    commandDocument: () => void = () => { this.onCommandDocument(); };\n    commandDocumentText: string = '';\n\n    isCommandDocument2: boolean = false;\n    isCommandDocument2Enabled: boolean = true;\n    commandDocument2: () => void = () => { this.onCommandDocument2(); };\n    commandDocument2Text: string = '';\n\n    isCommandDocument3: boolean = false;\n    isCommandDocument3Enabled: boolean = true;\n    commandDocument3: () => void = () => { this.onCommandDocument3(); };\n    commandDocument3Text: string = '';\n\n    isCommandDocument4: boolean = false;\n    isCommandDocument4Enabled: boolean = true;\n    commandDocument4: () => void = () => { this.onCommandDocument4(); };\n    commandDocument4Text: string = '';\n\n    isCommandDocument5: boolean = false;\n    isCommandDocument5Enabled: boolean = true;\n    commandDocument5: () => void = () => { this.onCommandDocument5(); };\n    commandDocument5Text: string = '';\n\n    isCommandNew: boolean = false;\n    isCommandNewEnabled: boolean = true;\n    commandNew: () => void = () => { this.onCommandNew(); };\n    commandNewText: string = '';\n\n    isCommandOrder: boolean = false;\n    isCommandOrderEnabled: boolean = true;\n    commandOrder: () => void = () => { this.onCommandOrder(); };\n    commandOrderText: string = '';\n\n    isCommandRestart: boolean = false;\n    isCommandRestartEnabled: boolean = true;\n    commandRestart: () => void = () => { this.onCommandRestart(); };\n    commandRestartText: string = '';\n\n    isCommandSave: boolean = false;\n    isCommandSaveEnabled: boolean = true;\n    commandSave: () => void = () => { this.onCommandSave(); };\n    commandSaveText: string = '';\n\n    isCommandSearch: boolean = false;\n    isCommandSearchEnabled: boolean = true;\n    commandSearch: () => void = () => { this.onCommandSearch(); };\n    commandSearchText: string = '';\n\n    isCommandStart: boolean = false;\n    isCommandStartEnabled: boolean = true;\n    commandStart: () => void = () => { this.onCommandStart(); };\n    commandStartText: string = '';\n\n    isCommandStop: boolean = false;\n    isCommandStopEnabled: boolean = true;\n    commandStop: () => void = () => { this.onCommandStop(); };\n    commandStopText: string = '';\n\n    isCommandSwap: boolean = false;\n    isCommandSwapEnabled: boolean = true;\n    commandSwap: () => void = () => { this.onCommandSwap(); };\n    commandSwapText: string = '';\n\n    isCommandExcel: boolean = false;\n    isCommandExcelEnabled: boolean = true;\n    commandExcel: () => void = () => { this.onCommandExcel(); };\n    commandExcelText: string = '';\n\n    // #endregion\n\n    // #region Methods\n\n    activate(): void {\n        this.onActivate();\n        this.onActivated();\n    }\n\n    navigateTo(path: any) {\n        this.onNavigateTo(path);\n    }\n\n    /** Must be overridden. */\n    onNavigateTo(value: any): void {\n        throw new Error('[Blade] \\'onNavigateTo\\' is an abstract function. Define one in the derived class.');\n    }\n\n    // At the moment we do not distinguish between lower and upper case path name\n    comparePaths(path1: string, path2: string): boolean {\n        if (path1 == null) { return false; }\n        if (path2 == null) { return false; }\n        if (path1.toLowerCase() === path2.toLowerCase()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** close blade. */\n    close() {\n        if (!this.onClose) {\n            return; // do not close blade\n        }\n\n        if (this.portalService.areaBlades !== undefined) {\n            this.portalService.areaBlades.clearPath(this.path);\n        } else {\n            throw new Error('[Blade] path: \\'' + this.path + '\\' could not be removed, since no \\'this.portalService.areaBlades\\' available.');\n        }\n    }\n\n    /** Override */\n    onClose(): boolean {\n        return true;\n    }\n\n    // #region Commands\n\n    onCommandBrowse(): void {\n        throw new Error('[Blade] \\'onCommandBrowse\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandCancel(): void {\n        throw new Error('[Blade] \\'onCommandCancel\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandCopy(): void {\n        throw new Error('[Blade] \\'onCommandCopy\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDelete(): void {\n        throw new Error('[Blade] \\'onCommandDelete\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument(): void {\n        throw new Error('[Blade] \\'onCommandDocument\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument2(): void {\n        throw new Error('[Blade] \\'onCommandDocument2\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument3(): void {\n        throw new Error('[Blade] \\'onCommandDocument3\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument4(): void {\n        throw new Error('[Blade] \\'onCommandDocument4\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument5(): void {\n        throw new Error('[Blade] \\'onCommandDocument5\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandNew(): void {\n        throw new Error('[Blade] \\'onCommandNew\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandOrder(): void {\n        throw new Error('[Blade] \\'onCommandOrder\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandRestart(): void {\n        throw new Error('[Blade] \\'onCommandRestart\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSave(): void {\n        throw new Error('[Blade] \\'onCommandSave\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSearch(): void {\n        throw new Error('[Blade] \\'onCommandSearch\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandStart(): void {\n        throw new Error('[Blade] \\'onCommandStart\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandStop(): void {\n        throw new Error('[Blade] \\'onCommandStop\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSwap(): void {\n        throw new Error('[Blade] \\'onCommandSwap\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandExcel(): void {\n        throw new Error('[Blade] \\'onCommandExcel\\' is an abstract function. Define one in the derived class.');\n    }\n\n    // #endregion\n\n    // #endregion\n\n    /** Change title, as soon as watchExpression changes. watchExpression is either a variable ore an expression, e.g. [name1 + name2] */\n    setTitle(watchExpression: string, func: () => void) {\n        console.log('commented code at : Blade.setTitle');\n        //if (this.watcherTitle === undefined) {\n        //    if (this.$scope !== null) {\n        //        // angular1\n        //        this.watcherTitle = this.$scope.$watch(watchExpression, () => { func(); });\n        //        this.$scope.$on('$destroy', () => { this.watcherTitle(); });\n        //    } else {\n        //        // angular2\n        //        console.log('[Blade.setTitle()] not supported for angular2. use [ngOnChanges] instead.');\n        //    }\n        //}\n    }\n\n    private setBladeHeights(): void {\n        this.bladeContentHeight = window.innerHeight - 40 - 125; // 40 = topbar, 125 = blade header\n        this.bladeContentHeightInner = this.bladeContentHeight - 50 - 3; // 50 = padding (top and bottom), somehow we miss 3px\n\n        // this.portalService.$timeout(() => { }, 50);\n        //window.setTimeout(() => { }, 50);\n    }\n}\n","import { Input } from '@angular/core';\r\n\nimport { PortalService } from './portal-service';\nimport { Tiles } from './tiles';\nimport { UserControlBase } from './user-control-base';\nimport { Blade } from './blade';\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\n\nexport class AreaBlades extends UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService) { // $scope: any,\n        super(portalService); // $scope,\n\n        this.portalScroll = window.document.getElementById('apa-portal-scroll');\n\n        this.setupWindowResizeListener(() => { this.setPortalScrollCss(); });\n\n        this.blades = [];\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    private portalScroll: HTMLElement;\n\n    private addBladeListener: () => void;\n    private areaNotificationShowListener: () => void;\n    private areaNotificationHideListener: () => void;\n\n    blades: Array<Blade> = new Array<Blade>();\n\n    // #endregion\n\n    // #region Methods\n\n    raiseBladeOnActivateEvent(args: IAddBladeEventArgs) {\n        let isEventRaised: boolean = false;\n\n        this.blades.forEach((blade) => {\n            if (blade.path.toLowerCase() === args.path.toLowerCase()) {\n                // Raise event onActivate\n                blade.onActivate();\n                isEventRaised = true;\n                return;\n            }\n        });\n    }\n\n    raiseAddBladeEvent(args: IAddBladeEventArgs) {\n        let isBladeAlreadyShown: boolean = false;\n        this.blades.forEach((blade) => {\n            if (blade.path.toLowerCase() === args.path.toLowerCase()) {\n                // Blade is already shown, just activate it again\n                blade.onActivate();\n                isBladeAlreadyShown = true;\n                return;\n            }\n        });\n\n        if (!isBladeAlreadyShown) {\n            // Add the blade, since it is not yet shown\n            this.portalService.areaBlades.addBlade(args.path, args.pathSender);\n            //this.portalService.$rootScope.$broadcast('AreaBlades.AddBlade', args);\n        }\n    }\n\n    setFirstBlade(path: string): Blade | void {\n        this.clearAll();\n        this.hidePanorama();\n        return this.addBlade(path);\n    }\n\n    addBlade(path: string, senderPath: string = ''): Blade | void {\n        if (path == null) { return; }\n        if (senderPath == null) { return; }\n        let portalcontent: HTMLElement = null;\n\n        console.log('commented code at : AreaBlades.addBlade (analytics)');\n        // this.portalService.$analytics.pageTrack(path.toLowerCase());\n\n        path = path.toLowerCase();\n        senderPath = senderPath.toLowerCase();\n\n        // #region Verify\n\n        if (path === undefined || path === '') { return; }\n\n        if (this.portalService.$window !== undefined) {\n            if (this.portalService.$window.document === undefined) {\n                throw new Error('[AreaBlades] \\'this.$window.document\\' undefined.');\n            }\n\n            portalcontent = this.portalService.$window.document.getElementById('apa-portal-scroll');\n            if (portalcontent === null) {\n                throw new Error('[AreaBlades] HTML element with ID [apa-portal-scroll] not found. Maybe it is to early to call function \\'BladeArea.addBlade\\'.');\n            }\n        }\n\n        // #endregion\n\n        // #region Clear all children of the parent path\n\n        this.clearChild(senderPath);\n\n        // #endregion\n\n        // #region Make sure the blade is not yet show\n\n        this.blades.forEach((blade) => {\n            // we do not distinguish between lower and upper case path name\n            if (blade.comparePaths(blade.path, path)) {\n                throw new Error('[AreaBlades] path: \\'' + path + '\\' will not be added. It is already added.');\n            }\n        });\n\n        // #endregion\n\n        // #region Show the blade\n\n        let blade = new Blade(this.portalService, path, ''); // this.$scope,\n        this.blades.push(blade);\n\n        // #endregion\n\n        // #region Position the blade\n\n        if (this.portalService.$window !== undefined) {\n            this.portalService.$window.setTimeout(() => {\n                let azureportalblades = this.portalService.$window.document.getElementsByClassName('azureportalblade');\n\n                let i = this.blades.length - 1;\n\n                // HACK: Sometime azureportalblades[i].offsetLeft is undefined.\n                //       So now if it is, the user has to scroll on its own.\n                if (azureportalblades[i] !== undefined && (<any>azureportalblades[i]).offsetLeft !== undefined) {\n                    let sl = (<any>azureportalblades[i]).offsetLeft - 30;\n                    portalcontent.scrollLeft = sl;\n                }\n            }, 250);\n        }\n\n        // #endregion\n\n        return blade;\n    }\n\n    clearAll(): void {\n        this.blades.length = 0;\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearPath(path: string): void {\n        // we do not distinguish between lower and upper case path name\n        path = path.toLowerCase();\n\n        let isremoved = this.blades.some((blade, index) => {\n            if (blade.comparePaths(blade.path, path)) {\n                this.blades.length = index;\n                return true;\n            }\n        });\n\n        if (!isremoved && this.portalService.areaNotification.path === path) {\n            this.portalService.areaNotification.hide();\n            isremoved = true;\n        }\n\n        if (!isremoved) {\n            throw new Error('[AreaBlades.clearPath] path: \\'' + path + '\\' could not be removed, since path not found in bladeUrls.');\n        }\n\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearLevel(level: number) {\n        if (this.blades.length < level) {\n            throw new Error('[AreaBlades] level: \\'' + level + '\\' could not be cleard, since only \\'' + this.blades.length + '\\' available.');\n        }\n\n        if (level === 0) { level = 1; }\n        this.blades.length = level - 1;\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearLastLevel() {\n        this.clearLevel(this.blades.length);\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearChild(path: string): void {\n        path = path.toLowerCase();\n\n        if (path === '') {\n            return;\n        }\n        let isremoved = this.blades.some((blade, index) => {\n            // we do not distinguish between lower and upper case path name\n            if (blade.comparePaths(blade.path, path)) {\n                this.blades.length = index + 1;\n                return true;\n            }\n        });\n        if (!isremoved) {\n            throw new Error('[AreaBlades.clearChild] path: \\'' + path + '\\' could not be removed, since path not found in bladeUrls.');\n        }\n    }\n\n    showPanoramaIfNoBlades() {\n        if (this.blades.length === 0) {\n            if (this.portalService.panorama !== undefined) {\n                {\n                    this.portalService.panorama.isVisible = true;\n                    this.portalService.panorama.startboard.tiles.showTiles = true;\n                }\n            }\n        }\n    }\n\n    hidePanorama() {\n        if (this.portalService.panorama !== undefined) {\n            this.portalService.panorama.isVisible = false;\n            this.portalService.panorama.startboard.tiles.showTiles = false;\n        }\n    }\n\n    /** We need to call this when AreaBlades is no longer used, otherwise the listener does not get removed. */\n    close() {\n        // Unregister Listeners\n        this.addBladeListener();\n        this.areaNotificationShowListener();\n        this.areaNotificationHideListener();\n    }\n\n    // #endregion\n\n    setPortalScrollCss() {\n        if (this.portalScroll != null && this.portalService.areaNotification != null) {\n            this.portalScroll.style.marginRight = this.portalService.areaNotification.widthAreaUsed + 'px';\n        }\r\n    }\n}\n\n// angular.module('angularportalazure').service('areaBlades', AreaBlades);\n","import { Input } from '@angular/core';\r\n\r\nimport { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { BladeData } from './blade-data';\r\nimport { BladeNavItem } from './blade-nav-item';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\n\r\n\r\nexport class AreaNotification extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n\r\n        this.areaNotification = window.document.getElementById('apa-notification-area');\r\n\r\n        this.hide();\r\n        this.setupWindowResizeListener(() => { this.calcualteCssStyles(); });\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    path: string = '';\r\n    widthAreaUsed: number = 0;\r\n\r\n    private areaNotification: HTMLElement;\r\n\r\n    private _width: number = 250;\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n    set width(value: number) {\r\n        this._width = value;\r\n        this.calcualteCssStyles();\r\n    }\r\n\r\n    private _backgroundColor: string = '#32383f';\r\n    get backgroundColor(): string {\r\n        return this._backgroundColor;\r\n    }\r\n    set backgroundColor(value: string) {\r\n        this._backgroundColor = value;\r\n        this.calcualteCssStyles();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    hide() {\r\n        // Do not hide on false\r\n        if (!this.onHide) {\r\n            return;\r\n        }\r\n\r\n        this.path = '';\r\n        this.widthAreaUsed = 0;\r\n        if (this.areaNotification != null) { this.areaNotification.style.display = 'none' };\r\n\r\n        this.portalService.areaBlades.setPortalScrollCss();\r\n        //this.portalService.$rootScope.$broadcast('AreaNotification.Hide');\r\n    }\r\n\r\n    show(width: number = 250) {\r\n        this.onShow();\r\n        this.width = width;\r\n        this.widthAreaUsed = 1; // Indicate to the calcualteCssStyles function, that we need to set this value\r\n        this.calcualteCssStyles();\r\n        if (this.areaNotification != null) { this.areaNotification.style.display = 'inline-block' };\r\n\r\n        console.log('commented code at : AreaNotification.show');\r\n        this.portalService.areaBlades.setPortalScrollCss()\r\n        //this.portalService.$rootScope.$broadcast('AreaNotification.Show');\r\n        this.onShowed();\r\n    }\r\n\r\n    /* Override */\r\n    onHide(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /* Override */\r\n    onShow() {\r\n    }\r\n\r\n    /* Override */\r\n    onShowed() {\r\n    }\r\n\r\n    private calcualteCssStyles() {\r\n        this.areaNotification = window.document.getElementById('apa-notification-area');\r\n\r\n        this.areaNotification.style.position = 'absolute';\r\n        this.areaNotification.style.top = '0';\r\n        this.areaNotification.style.height = '100%';\r\n        this.areaNotification.style.backgroundColor = this.backgroundColor;\r\n        this.areaNotification.style.borderLeft = '2px solid gray';\r\n        this.areaNotification.style.width = this.width + 'px';\r\n        this.areaNotification.style.left = this.portalService.$window.innerWidth - this.width + 'px';\r\n\r\n        if (this.widthAreaUsed !== 0) {\r\n            this.widthAreaUsed = this.width;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","export class UserAccount {\r\n    // #region Constructor\r\n\r\n    constructor(username: string, firstName: string = '', lastName: string = '') {\r\n        this.userName = username;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    // #region firstName\r\n\r\n    private _firstName: string;\r\n    get firstName(): string {\r\n        return this._firstName;\r\n    }\r\n    set firstName(value: string) {\r\n        this._firstName = value;\r\n        this._name = (this._firstName || '') + ' ' + (this._lastName || '');\r\n    }\r\n    // #endregion\r\n\r\n    // #region lastName\r\n    private _lastName: string;\r\n    get lastName(): string {\r\n        return this._lastName;\r\n    }\r\n    set lastName(value: string) {\r\n        this._lastName = value;\r\n        this._name = (this._firstName || '') + ' ' + (this._lastName || '');\r\n    }\r\n    // #endregion\r\n\r\n    // #region name\r\n    private _name: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(value: string) {\r\n        throw new Error('[UserAccount] \\'name\\' is a calculated value from \\'firsName\\' and \\'lastName\\'. Assignment not allowed.');\r\n    }\r\n    // #endregion\r\n\r\n    userName: string;\r\n    emailAddress: string;\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { BladeData } from './blade-data';\r\nimport { BladeNavItem } from './blade-nav-item';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\nimport { UserAccount } from './user-account';\r\n\r\n\r\nexport class AvatarMenu extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n\r\n        this.userAccount = new UserAccount('demo@apa.org', 'demo', 'apa');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    userAccount: UserAccount | null;\r\n\r\n    // #endregion\r\n}\r\n","/** The names are used in CSS for layouting, e.g. style='mini' */\nexport enum TileSizes {\n    small,\n    mini,\n    normal,\n    herowide\n}\n","import { TileSizes } from './tile-sizes';\r\n\r\nexport class TileSize {\r\n    // #region Constructor\r\n\r\n    constructor(public tileSizes: TileSizes, public width: number, public height: number) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    static getTileSizes(): Array<TileSize> {\r\n        let tileSizes = Array<TileSize>();\r\n\r\n        tileSizes.push(new TileSize(TileSizes.small, 90, 90));\r\n        tileSizes.push(new TileSize(TileSizes.mini, 180, 90));\r\n        tileSizes.push(new TileSize(TileSizes.normal, 180, 180));\r\n        tileSizes.push(new TileSize(TileSizes.herowide, 540, 360));\r\n\r\n        return tileSizes;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Tile } from './tile';\r\nimport { TileSize } from './tile-size';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tiles {\r\n    // #region Properties\r\n\r\n    showTiles: boolean = true;\r\n    tiles: Array<any> = new Array<any>();\r\n    isTilesLoaded: boolean = false;\r\n    hideTileIfOnlyOne: boolean = true;  // not yet evaluated in HTML, but this is the standard behavior\r\n\r\n    private tileSizes = TileSize.getTileSizes();\r\n    private nextLeft: number = 0;\r\n    private nextTop: number = 0;\r\n    private columnHeightMax: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    addTile(tile: Tile): Tile {\r\n        this.isTilesLoaded = true;\r\n        let tileSize = this.tileSizes[tile.tileSize];\r\n        tile.size = TileSizes[tile.tileSize];  // Get CSS Name\r\n\r\n        tile.top = this.nextTop + 'px';\r\n        tile.left = this.nextLeft + 'px';\r\n\r\n        this.nextLeft += tileSize.width;\r\n\r\n        if (tileSize.height > this.columnHeightMax) {\r\n            this.columnHeightMax = tileSize.height;\r\n        }\r\n\r\n        if (this.nextLeft > 540) {\r\n            this.nextLeft = 0;\r\n            this.nextTop += this.columnHeightMax;\r\n            this.columnHeightMax = 0;\r\n        }\r\n\r\n        this.tiles.push(tile);\r\n\r\n        return tile;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\n\r\nexport class Startboard extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n        this.tiles = new Tiles();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    tiles: Tiles;\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\nimport { AvatarMenu } from './avatar-menu';\r\nimport { Startboard } from './startboard';\r\n\r\nexport class Panorama extends UserControlBase {\r\n    // #region Properties\r\n\r\n    title: string;\r\n    isVisible: boolean = true;\r\n\r\n    avatarMenu: AvatarMenu;\r\n    startboard: Startboard;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService, title: string) { // $scope: any,\r\n        super(portalService); // $scope,\r\n        this.title = title;\r\n        this.portalService.panorama = this;\r\n\r\n        this.avatarMenu = new AvatarMenu(this.portalService);\r\n        this.startboard = new Startboard(this.portalService);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { AppService } from '../service/app/app.service';\r\n\r\n\r\nimport { AreaBlades } from './area-blades';\r\nimport { AreaNotification } from './area-notification';\r\nimport { BladeParameter } from './blade-parameter';\r\nimport { Panorama } from './panorama';\r\nimport { PortalShell } from './portal-shell';\r\nimport { Angulartics2Module } from 'angulartics2';\r\nimport { Angulartics2GoogleAnalytics } from 'angulartics2/ga';\r\n\r\nexport class PortalService {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$injector'];\r\n    constructor() { // $injector: any, angulartics2GoogleAnalytics: Angulartics2GoogleAnalytics\r\n        //this.$injector = $injector;\r\n\r\n        //this.$http = $injector.get('$http');\r\n        //this.$httpBackend = $injector.get('$httpBackend');\r\n        //this.$q = $injector.get('$q');\r\n        //this.$rootScope = $injector.get('$rootScope');\r\n        //this.$window = $injector.get('$window');\r\n        //this.$analytics = $injector.get('$analytics');\r\n        //this.$timeout = $injector.get('$timeout');\r\n        //this.$translate = $injector.get('$translate');\r\n\r\n        //this.ngDialog = <any>$injector.get('ngDialog');\r\n\r\n        this.areaBlades = new AreaBlades(this);\r\n        this.areaNotification = new AreaNotification(this);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    appService: AppService;\r\n    parameter: BladeParameter = { action: 'none', itemId: 0 };\r\n    $analytics: Angulartics2GoogleAnalytics;\r\n\r\n    // #region ng.IModule properties\r\n\r\n    //animate;\r\n    //animation;\r\n    //component;\r\n    //config;\r\n    //constant;\r\n    //controller;\r\n    //directive;\r\n    //factory;\r\n    //filter;\r\n    //provider;\r\n    //run;\r\n    //service;\r\n    //value;\r\n    //decorator;\r\n    //name;\r\n    //requires;\r\n\r\n    // #endregion\r\n\r\n    // #region Visual components\r\n\r\n    portalShell: PortalShell;\r\n    panorama: Panorama = new Panorama(this, 'angular-portal-azure-module');\r\n    areaBlades: AreaBlades;\r\n    areaNotification: AreaNotification; // is created and set in 'home' directive\r\n\r\n    // #endregion\r\n\r\n    // #region NgDialogs\r\n\r\n    ngDialog: any; // any should be: angular.dialog.IDialogService;\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Services\r\n\r\n    $injector: any; // angular.auto.IInjectorService;\r\n    $http: any; // angular.IHttpService;\r\n    $httpBackend: any; // angular.IHttpBackendService;\r\n    $q: any; // angular.IQService;\r\n    $rootScope: any; // angular.IRootScopeService;\r\n    $window: any; // angular.IWindowService;\r\n    $timeout: any; // angular.ITimeoutService;\r\n    $translate: any; // angular.translate.ITranslateService;\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n}\r\n\r\n// angular.module('angularportalazure').service('portalService', PortalService);\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart, Event as EventX } from '@angular/router';\r\n\r\nimport { filter } from \"rxjs/operators\";\r\n\r\nimport { AppService } from '../app/app.service';\r\nimport { AppConfigService } from '../app-config/app-config.service';\r\n\r\nimport { Blade } from '../../domain/blade/blade';\r\n\r\nimport { PortalService } from '../../domain/portal-service';\r\n\r\n@Injectable()\r\nexport class BladeService {\r\n    // #region Properties\r\n\r\n    bladeId: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(private appConfigService: AppConfigService, private router: Router, private portalService: PortalService, private appService: AppService) {\r\n        // #region Handle router events\r\n\r\n        this.router.events\r\n            .pipe(\r\n                // The \"events\" stream contains all the navigation events. For this demo,\r\n                // though, we only care about the NavigationStart event as it contains\r\n                // information about what initiated the navigation sequence.\r\n                filter((event: EventX) => {\r\n                    return (event instanceof NavigationStart);\r\n                })\r\n            )\r\n            .subscribe(\r\n                (event: (NavigationStart)) => {\r\n                    // See [https://angular.io/api/router/Event] for routes sequences\r\n\r\n                    // NavigationStart\r\n                    if (event instanceof NavigationStart) {\r\n                        // console.log({ NavigationStart: '', event: event, eventUrl: event.url, eventRestoreState: event.restoredState, routerConfig: this.router.config });\r\n                        this.fixRouterConfigBladeOutlet(event);\r\n                        this.handleRestoreStateEventForBlades(event);\r\n                    }\r\n\r\n                    console.groupEnd();\r\n                });\r\n\r\n        // #endregion\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    /**\r\n     * \r\n     */\r\n    navigateTo(routerToPath: string): void {\r\n        let isRouteMatchFound = false;\r\n\r\n        // Process all route configuration entries\r\n        this.router.config.forEach((routeConfig) => {\r\n            // Try to match a configured route, with the one requested\r\n            // (forEach cannot break out (stop execution), therefore we check for isRouteMatchFound for no further processing)\r\n            if (routeConfig.path === routerToPath && !isRouteMatchFound) {\r\n                this.bladeId = this.bladeId + 1; // create a unique id\r\n                const outletId = 'blade' + this.bladeId;\r\n                this.appConfigService.appConfig.blades.push({ bladeId: outletId } as Blade);\r\n                routeConfig.outlet = outletId; // set outlet, so the route knows, in which router-outlet it should be shown\r\n\r\n                // Navigate to the route\r\n                this.router.navigate([{ outlets: { [outletId]: [routerToPath] } }]);\r\n                //this.router.navigate([{ outlets: { primary: ['appboard'], [outletId]: [routerToPath] } }]);\r\n\r\n                isRouteMatchFound = true;\r\n            }\r\n        });\r\n\r\n        // No match found\r\n        if (!isRouteMatchFound) {\r\n            console.log('XXXXXX');\r\n\r\n            if (this.appConfigService.appConfig.blades.length > 0) {\r\n                this.appConfigService.appConfig.appboard.isVisible = false;\r\n            } else {\r\n                this.appConfigService.appConfig.appboard.isVisible = true;\r\n            }\r\n\r\n            if (this.portalService.areaBlades.blades.length == 0) {\r\n                this.portalService.panorama.isVisible = true;\r\n                this.portalService.panorama.startboard.tiles.showTiles = true;\r\n            }\r\n\r\n            this.router.navigate(['/' + routerToPath]);\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    /**\r\n     * Fix router configuration for blades\r\n     * When a blade is added to the router, the route for the blade is updated with an outlet identifier (e.g. blade1),\r\n     * see above in the navigateTo function.\r\n     * Because this identifier is not persistent and may changes between sessions, we need to add the outlet identifier\r\n     * to the route configuration, so that a corresponding URL can be reconstructed.\r\n     * */\r\n    private fixRouterConfigBladeOutlet(event: NavigationStart): void {\r\n        // TODO:2019-09-30/hp: Not yet finished.\r\n        //                     Processing multiple blade outlets(https://localhost:44398/appboard(blade2:counter//blade1:fetchdata)).\r\n        //                     We need to parse event.url and find all blade outlets.\r\n        //                     At the moment only the first one is found and processed.\r\n        const outlet1 = event.url.substring(10, 16);\r\n        const path1 = event.url.substring(17).replace(')', '');\r\n        //this.router.routerState.root.children.forEach((child) => {\r\n        //    if (child.outlet.startsWith('blade')) {\r\n        //        console.log({ child: child });\r\n        this.router.config.forEach((config) => {\r\n            if (config.path == path1\r\n                && config.outlet === undefined) {\r\n                config.outlet = outlet1;\r\n                this.appConfigService.appConfig.blades.push({ bladeId: outlet1 } as Blade);\r\n            }\r\n        });\r\n        //    }\r\n        //});\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    private handleRestoreStateEventForBlades(event: NavigationStart): void {\r\n        // The \"restoredState\" property is set/defined when the navigation\r\n        // event is triggered by a \"popstate\" event (e.g.: back / forward buttons).\r\n        // It will contain the ID of the earlier navigation event\r\n        // to which the browser is returning.\r\n        // CAUTION: This ID may not be part of the current page rendering.\r\n        // This value is pulled out of the browser; and, may exist across page refreshes.\r\n        if (event.restoredState) {\r\n            if (event.url.indexOf('(blade') < 0) {\r\n                console.log('no more blades, reset appboard visibility')\r\n                this.appConfigService.appConfig.appboard.isVisible = true;\r\n\r\n                this.portalService.panorama.isVisible = true;\r\n                this.portalService.panorama.startboard.tiles.showTiles = true;\r\n            } else {\r\n                console.log('remove latest blade')\r\n                this.appConfigService.appConfig.blades.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","// https://devblogs.microsoft.com/premier-developer/angular-how-to-simplify-components-with-typescript-inheritance/\r\n\r\nimport { Injector } from '@angular/core';\r\n\r\nexport class InjectorService {\r\n    // #region Properties\r\n\r\n    private static injector: Injector = null;\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    static setInjector(injector: Injector) {\r\n        InjectorService.injector = injector;\r\n    }\r\n\r\n    static getInjector(): Injector {\r\n        return InjectorService.injector;\r\n    }\r\n\r\n    // #endregion\r\n}       \r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { PortalService } from '../../domain/portal-service';\r\n\r\nimport { AppConfigService } from '../app-config/app-config.service'\r\nimport { BladeService } from '../blade/blade.service'\r\nimport { InjectorService } from '../injector/injector.service'\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class AppService {\r\n    // #region Constructors\r\n\r\n    //constructor(title: string = null) {\r\n    constructor(\r\n        public appConfigService: AppConfigService,\r\n        public bladeService: BladeService,\r\n        injector: Injector\r\n    ) {\r\n        InjectorService.setInjector(injector);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    portalService: PortalService;\r\n}\r\n","//import { MainService } from '../../service/main/main.service';\r\n//import { BrowserWindowService } from '../service/base/browser-window.service';\r\n\r\nexport class UserControlBase {\r\n    // #region Properties\r\n\r\n    //browserWindowService: BrowserWindowService;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // public mainService: MainService\r\n    constructor() {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n    /** Override */\r\n    onActivate(): void {\r\n    }\r\n\r\n    /** Override */\r\n    onActivated(): void {\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","export class Viewport {\r\n    // #region Properties\r\n\r\n    browserWindowInnerHeight: number;       // provided by the browser itself\r\n    browserWindowInnerWidth: number;        // provided by the browser itself\r\n\r\n    private fixedHeight: number = 0;       // contains the heights of all the fixed area in the browser | 20 is the scroller\r\n    dynamicHeight: number = 0;              // calculated Height (browserWindowInnerHeight - fixedHeight)\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    setBrowserWindow(browserWindow: Window) {\r\n        this.browserWindowInnerHeight = browserWindow.innerHeight;\r\n        this.browserWindowInnerWidth = browserWindow.innerWidth;\r\n        this.dynamicHeight = this.browserWindowInnerHeight - this.fixedHeight;\r\n    }\r\n\r\n    addFixedHeight(height: number) {\r\n        this.fixedHeight = this.fixedHeight + height;\r\n        this.dynamicHeight = this.browserWindowInnerHeight - this.fixedHeight;\r\n    }\r\n\r\n    log(): void {\r\n        console.group('Viewport');\r\n        console.log(`browserWindowInnerHeight: ${this.browserWindowInnerHeight}`);\r\n        console.log(`browserWindowInnerWidth: ${this.browserWindowInnerWidth}`);\r\n        console.log(`dynamicHeight: ${this.dynamicHeight}`);\r\n        console.log(`fixedHeight: ${this.fixedHeight}`);\r\n        console.groupEnd();\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","// More information: https://brianflove.com/2018/01/11/angular-window-provider/\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { throttleTime, startWith, map } from 'rxjs/operators';\r\n\r\nimport { Viewport } from './viewport';\r\n//import { pipe } from '@angular/core/src/render3';\r\n\r\n// #region Global JavaScript Functions\r\n\r\nfunction getWindow(): any {\r\n    return window;\r\n}\r\n\r\n// #endregion\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class BrowserService {\r\n    // #region Properties\r\n\r\n    get browserWindow(): Window {\r\n        return getWindow();\r\n    }\r\n\r\n    private viewport: Viewport;\r\n\r\n    onResize: Observable<Viewport>;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor() {\r\n        this.viewport = new Viewport();\r\n        this.viewport.addFixedHeight(40);\r\n        this.viewport.setBrowserWindow(this.browserWindow); // Initialize values\r\n\r\n        console.log('commented code at : BrowserService.constructor');\r\n        //this.onResize = fromEvent(this.browserWindow, 'resize')\r\n        //    .pipe(\r\n        //        throttleTime(20),\r\n        //        map((event) => {\r\n        //            this.viewport.setBrowserWindow(<Window>event.currentTarget);\r\n        //            return this.viewport;\r\n        //        }),\r\n        //        startWith(this.viewport),\r\n        //        //tap(viewport => console.log(viewport))\r\n        //    );\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { StatusBar } from './../status-bar';\r\nimport { UserControlBase } from './../base/user-control-base';\r\n\r\nimport { BrowserService } from '../../service/browser/browser.service';\r\nimport { InjectorService } from '../../service/injector/injector.service';\r\n\r\nimport { Viewport } from '../../service/browser/viewport';\r\n\r\nexport class Blade extends UserControlBase {\r\n    // #region Properties\r\n\r\n    private browserService: BrowserService;\r\n    viewport: Viewport = new Viewport();\r\n\r\n    // bladeId: string = '';\r\n    private _bladeId: string = '';\r\n    get bladeId(): string {\r\n        return this._bladeId;\r\n    }\r\n    set bladeId(bladeId: string) {\r\n        if (bladeId == null) { return; }\r\n        this._bladeId = bladeId.toLowerCase();\r\n    }\r\n\r\n    /** HACK:2016-11-06/hp: [angular-portal-blade] needs [this] as the controller.\r\n    We don't know how to provide [this] to the directive.\r\n    So we came up with this [vm] property.*/\r\n    vm: any = {};\r\n\r\n    statusBar: StatusBar;\r\n\r\n    visibility: string = 'collapse';\r\n\r\n    private watcherTitle: () => void;\r\n\r\n    bladeContentHeight: number;\r\n    bladeContentHeightInner: number;\r\n\r\n    title: string = '';\r\n    subTitle: string = '';\r\n    width = '0';\r\n    widthStackLayout = { 'width': '50px' };\r\n\r\n    height = '0';\r\n\r\n    isInnerHtml: boolean = true;\r\n\r\n    formblade: any; // angular.IFormController; // name of the ng-form directive\r\n\r\n    // #region path\r\n\r\n    private _path: string;\r\n    get path(): string {\r\n        return this._path;\r\n    }\r\n    // For the moment we do distinguish between lower and upper case path name\r\n    set path(newPath: string) {\r\n        if (newPath == null) { return; }\r\n        this._path = newPath.toLowerCase();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Commands\r\n\r\n    isCommandBrowse: boolean = false;\r\n    commandBrowse: () => void = () => { this.onCommandBrowse(); };\r\n    commandBrowseText: string = '';\r\n\r\n    isCommandCancel: boolean = false;\r\n    commandCancel: () => void = () => { this.onCommandCancel(); };\r\n    commandCancelText: string = '';\r\n\r\n    isCommandCopy: boolean = false;\r\n    isCommandCopyEnabled: boolean = true;\r\n    commandCopy: () => void = () => { this.onCommandCopy(); };\r\n    commandCopyText: string = '';\r\n\r\n    isCommandDelete: boolean = false;\r\n    isCommandDeleteEnabled: boolean = true;\r\n    commandDelete: () => void = () => { this.onCommandDelete(); };\r\n    commandDeleteText: string = '';\r\n\r\n    isCommandDocument: boolean = false;\r\n    commandDocument: () => void = () => { this.onCommandDocument(); };\r\n    commandDocumentText: string = '';\r\n\r\n    isCommandDocument2: boolean = false;\r\n    commandDocument2: () => void = () => { this.onCommandDocument2(); };\r\n    commandDocument2Text: string = '';\r\n\r\n    isCommandDocument3: boolean = false;\r\n    commandDocument3: () => void = () => { this.onCommandDocument3(); };\r\n    commandDocument3Text: string = '';\r\n\r\n    isCommandDocument4: boolean = false;\r\n    commandDocument4: () => void = () => { this.onCommandDocument4(); };\r\n    commandDocument4Text: string = '';\r\n\r\n    isCommandDocument5: boolean = false;\r\n    commandDocument5: () => void = () => { this.onCommandDocument5(); };\r\n    commandDocument5Text: string = '';\r\n\r\n    isCommandNew: boolean = false;\r\n    commandNew: () => void = () => { this.onCommandNew(); };\r\n    commandNewText: string = '';\r\n\r\n    isCommandOrder: boolean = false;\r\n    commandOrder: () => void = () => { this.onCommandOrder(); };\r\n    commandOrderText: string = '';\r\n\r\n    isCommandRestart: boolean = false;\r\n    commandRestart: () => void = () => { this.onCommandRestart(); };\r\n    commandRestartText: string = '';\r\n\r\n    isCommandSave: boolean = false;\r\n    isCommandSaveEnabled: boolean = true;\r\n    commandSave: () => void = () => { this.onCommandSave(); };\r\n    commandSaveText: string = '';\r\n\r\n    isCommandSearch: boolean = false;\r\n    commandSearch: () => void = () => { this.onCommandSearch(); };\r\n    commandSearchText: string = '';\r\n\r\n    isCommandStart: boolean = false;\r\n    commandStart: () => void = () => { this.onCommandStart(); };\r\n    commandStartText: string = '';\r\n\r\n    isCommandStop: boolean = false;\r\n    commandStop: () => void = () => { this.onCommandStop(); };\r\n    commandStopText: string = '';\r\n\r\n    isCommandSwap: boolean = false;\r\n    commandSwap: () => void = () => { this.onCommandSwap(); };\r\n    commandSwapText: string = '';\r\n\r\n    isCommandExcel: boolean = false;\r\n    commandExcel: () => void = () => { this.onCommandExcel(); };\r\n    commandExcelText: string = '';\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // mainService: MainService, \r\n    constructor(path: string = '', title: string = '', subtitle: string = '', width: number = 200) {\r\n        super();\r\n        this.browserService = InjectorService.getInjector().get(BrowserService);\r\n        this.browserService.onResize.subscribe((viewport) => this.viewport = viewport);\r\n\r\n        this.vm = this;\r\n        this.path = path;\r\n        this.title = title;\r\n        this.subTitle = subtitle;\r\n        this.width = width + 'px';\r\n        this.widthStackLayout.width = width - 50 + 'px';  // 50 = padding (left and right)\r\n\r\n        //if (!mainService) { throw new Error('[Blade] constructor parameter \\'mainService\\' must be provided.'); }\r\n        if (!path) { throw new Error('[Blade] constructor parameter \\'path\\' must be a string.'); }\r\n        if (!title && title !== '') { throw new Error('[Blade] constructor parameter \\'title\\' must be a string when provided.'); }\r\n        if (!subtitle && subtitle !== '') { throw new Error('[Blade] constructor parameter \\'subtitle\\' must be a string when provided.'); }\r\n        if (!width && width !== 0) { throw new Error('[Blade] constructor parameter \\'width\\' must be a number when provided.'); }\r\n\r\n        if (width < 50) { throw new Error('[Blade] constructor parameter \\'width\\' must be at least 50.'); }\r\n\r\n        // Set 'this.mainService.areaBlades.blades[index]' to 'this'\r\n        //     'this.mainService.areaBlades.blades[index]' was generated during AddBlade\r\n        //this.mainService.areaBlades.blades.forEach((blade, index) => {\r\n        //    if (blade.path != null && this.path != null && blade.path.toLowerCase() === this.path.toLowerCase()) {\r\n        //        this.mainService.areaBlades.blades[index] = this;\r\n        //    }\r\n        //});\r\n\r\n        //this.browserWindow.setupWindowResizeListener(() => { this.setBladeHeights(); });\r\n        this.setBladeHeights();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n        console.log('ngOnInit');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    activate(): void {\r\n        this.onActivate();\r\n        this.onActivated();\r\n    }\r\n\r\n    navigateTo(path: any) {\r\n        this.onNavigateTo(path);\r\n    }\r\n\r\n    /** Must be overridden. */\r\n    onNavigateTo(value: any): void {\r\n        throw new Error('[Blade] \\'onNavigateTo\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    // At the moment we do not distinguish between lower and upper case path name\r\n    comparePaths(path1: string, path2: string): boolean {\r\n        if (path1 == null) { return false; }\r\n        if (path2 == null) { return false; }\r\n        if (path1.toLowerCase() === path2.toLowerCase()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** close blade. */\r\n    close() {\r\n        if (!this.onClose) {\r\n            return; // do not close blade\r\n        }\r\n\r\n        //if (this.mainService.areaBlades !== undefined) {\r\n        //    this.mainService.areaBlades.clearPath(this.path);\r\n        //} else {\r\n        //    throw new Error('[Blade] path: \\'' + this.path + '\\' could not be removed, since no \\'this.mainService.areaBlades\\' available.');\r\n        //}\r\n    }\r\n\r\n    /** Override */\r\n    onClose(): boolean {\r\n        return true;\r\n    }\r\n\r\n    ///** Change title, as soon as watchExpression changes. watchExpression is either a variable ore an expression, e.g. [name1 + name2] */\r\n    //setTitle(watchExpression: string, func: () => void) {\r\n    //    if (this.watcherTitle === undefined) {\r\n    //        if (this.$scope !== null) {\r\n    //            // angular1\r\n    //            this.watcherTitle = this.$scope.$watch(watchExpression, () => { func(); });\r\n    //            this.$scope.$on('$destroy', () => { this.watcherTitle(); });\r\n    //        } else {\r\n    //            // angular2\r\n    //        }\r\n    //    }\r\n    //}\r\n\r\n    // #region Commands\r\n\r\n    onCommandBrowse(): void {\r\n        throw new Error('[Blade] \\'onCommandBrowse\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandCancel(): void {\r\n        throw new Error('[Blade] \\'onCommandCancel\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandCopy(): void {\r\n        throw new Error('[Blade] \\'onCommandCopy\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDelete(): void {\r\n        throw new Error('[Blade] \\'onCommandDelete\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument2(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument2\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument3(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument3\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument4(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument4\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument5(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument5\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandNew(): void {\r\n        throw new Error('[Blade] \\'onCommandNew\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandOrder(): void {\r\n        throw new Error('[Blade] \\'onCommandOrder\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandRestart(): void {\r\n        throw new Error('[Blade] \\'onCommandRestart\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSave(): void {\r\n        throw new Error('[Blade] \\'onCommandSave\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSearch(): void {\r\n        throw new Error('[Blade] \\'onCommandSearch\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandStart(): void {\r\n        throw new Error('[Blade] \\'onCommandStart\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandStop(): void {\r\n        throw new Error('[Blade] \\'onCommandStop\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSwap(): void {\r\n        throw new Error('[Blade] \\'onCommandSwap\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandExcel(): void {\r\n        throw new Error('[Blade] \\'onCommandExcel\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    private setBladeHeights(): void {\r\n        //this.bladeContentHeight = this.mainService.browserWindowService.browserWindow.innerHeight - 40 - 125; // 40 = topbar, 125 = blade header\r\n        this.bladeContentHeightInner = this.bladeContentHeight - 50 - 3; // 50 = padding (top and bottom), somehow we miss 3px\r\n\r\n        // this.mainService.$timeout(() => {\r\n        // }, 50);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","//import { MainService } from '../../../service/main/main.service';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tile {\r\n    // #region Properties\r\n\r\n    //mainService: MainService;\r\n\r\n    title: string;\r\n    subTitle: string;\r\n\r\n    tileSize: TileSizes;\r\n    size: string; // CSS style class name - refactoring: rename to cssClass\r\n\r\n    left: string; // left position (CSS)\r\n    top: string; // top position (CSS)\r\n\r\n    private _bladePath: string;\r\n    get bladePath(): string {\r\n        return this._bladePath;\r\n    }\r\n\r\n    // For the moment we do not distinguish between lower and upper case path name\r\n    set bladePath(newBladePath: string) {\r\n        this._bladePath = newBladePath.toLowerCase();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // mainService: MainService, \r\n    constructor(title: string, bladePath: string) {\r\n        //this.mainService = mainService;\r\n\r\n        this.title = title;\r\n        this.bladePath = bladePath;\r\n        this.tileSize = TileSizes.normal;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    clicked() {\r\n        //this.mainService.areaBlades.setFirstBlade(this.bladePath);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","//import { MainService } from '../../../service/main/main.service';\r\nimport { Tile } from '../tile/tile';\r\n\r\nexport class AppboardEntry extends Tile {\r\n    // #region Properties\r\n\r\n    //mainService: MainService\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public title: string, public routerPath: string, public subTitle: string = '', public iconClass: string = '', public iconColor: string = '') {\r\n        super(title, routerPath);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","export class SidebarEntry {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public title: string, public routerPath: string, public iconClass: string = null) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Blade } from './blade';\r\nimport { TileSizes } from './tile-sizes';\r\nimport { PortalService } from './portal-service';\r\n\r\nexport class Tile {\r\n    // #region Constructor\r\n\r\n    constructor(title: string, bladePath: string, portalService: PortalService) {\r\n        this.portalService = portalService;\r\n\r\n        this.title = title;\r\n        this.bladePath = bladePath;\r\n        this.tileSize = TileSizes.normal;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    portalService: PortalService;\r\n\r\n    title: string;\r\n    subTitle: string;\r\n\r\n    // #region bladePath\r\n\r\n    get bladePath(): string {\r\n        return this._bladePath;\r\n    }\r\n    // For the moment we do not distinguish between lower and upper case path name\r\n    set bladePath(newBladePath: string) {\r\n        this._bladePath = newBladePath.toLowerCase();\r\n    }\r\n    private _bladePath: string;\r\n\r\n    // #endregion\r\n\r\n    tileSize: TileSizes;\r\n    size: string; // CSS style class name - refactoring: rename to cssClass\r\n\r\n    left: string; // Obsolete, use leftN\r\n    top: string; // Obsolete, use topN\r\n    leftN: string; // left position (CSS) - during refactoring, rename to left\r\n    topN: string; // top position (CSS) - during refactoring, rename to top\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    clicked() {\r\n        this.portalService.areaBlades.setFirstBlade(this.bladePath);\r\n        this.portalService.appService.bladeService.navigateTo(this.bladePath);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router, Event, NavigationStart, NavigationEnd, NavigationError } from '@angular/router';\n\nimport { AppService } from '../../service/app/app.service';\n\nimport { PortalService } from '../../domain/portal-service';\nimport { AreaNotification } from '../../domain/area-notification';\nimport { AreaBlades } from '../../domain/area-blades';\nimport { Tile } from '../../domain/tile';\n\ninterface DinoThemes {\n    [name: string]: DinoTheme;\n}\n\ninterface DinoTheme {\n    '--topbar-color': string;\n    '--topbar-background-color': string;\n    '--topbar-home-color': string;\n    '--blade-statusbar-background-color': string;\n    '--blade-commands-background-color': string;\n}\n\n@Component({\n    selector: 'angular-portal-azure',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'] // build error: Unknown version 67 of android\n})\nexport class AppComponent implements OnInit {\n    readonly themeProps = [\n        'color-main',\n        'color-main-darken',\n        'color-main-darken2',\n        'color-main-lighten',\n        'color-accent',\n    ];\n\n    readonly themes: DinoThemes = {\n        'black': {\n            '--topbar-color': '#fff',\n            '--topbar-background-color': '#1c1c1c',\n            '--topbar-home-color': '#fff',\n            '--blade-statusbar-background-color': '#293644',\n            '--blade-commands-background-color': '#3e4045',\n        },\n        'white': {\n            '--topbar-color': '#1c1c1c',\n            '--topbar-background-color': '#efefef',\n            '--topbar-home-color': '#1c1c1c',\n            '--blade-statusbar-background-color': '#dcdcdc',\n            '--blade-commands-background-color': '#c7c7c7',\n        }\n    };\n\n    portalService: PortalService;\n    selectedTheme: DinoTheme = this.themes['black'];\n\n    constructor(public appService: AppService, private router: Router) {\n        this.portalService = new PortalService();\n        this.portalService.appService = this.appService;\n        this.portalService.areaNotification = new AreaNotification(this.portalService);\n        this.portalService.areaBlades = new AreaBlades(this.portalService);\n\n        this.appService.portalService = this.portalService;\n    }\n\n    ngOnInit() {\n        setTimeout(() => { this.appService.appConfigService.appConfig.isShowSplashScreen = false; }, 500);\n\n        // TODO:2019-09-27/hp: convert NEW API to OLD - Copy TILES\n        //                     refactor this.portalService.panorama.startboard.tiles\n        //                       to use this.appService.appConfigService.appConfig.appboard\n        this.appService.appConfigService.appConfig.appboard.forEach((item) => {\n            let tile = this.portalService.panorama.startboard.tiles.addTile(new Tile(item.title, item.routerPath, this.portalService));\n            tile.subTitle = item.subTitle;\n        });\n    }\n\n    setTheme(themeIndex: string) {\n        this.selectedTheme = this.themes[themeIndex];\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Blade } from '../../domain/blade';\nimport { PortalService } from '../../domain/portal-service';\r\n\n@Component({\n    selector: 'apa-blade',\n    templateUrl: './blade.component.html',\n    styleUrls: ['./blade.component.scss'] // build error: Unknown version 67 of android\n})\nexport class BladeComponent extends Blade implements OnInit {\n    constructor(portalService: PortalService) {\n        super(portalService, 'blade1', '', '', 500)\r\n    }\n\n    ngOnInit() {\n    }\n\n    //close = () => { };\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'apa-grid',\n    templateUrl: './grid.component.html',\n    styleUrls: ['./grid.component.scss'] // build error: Unknown version 67 of android\n})\nexport class GridComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'apa-nav',\n    templateUrl: './nav.component.html',\n    styleUrls: ['./nav.component.scss'] // build error: Unknown version 67 of android\n})\nexport class NavComponent implements OnInit {\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AppService } from '../../../service/app/app.service';\r\n\r\nimport { PortalService } from '../../../domain/portal-service';\r\nimport { AreaNotification } from '../../../domain/area-notification';\r\nimport { AreaBlades } from '../../../domain/area-blades';\r\nimport { Tile } from '../../../domain/tile';\r\n\r\n@Component({\r\n    selector: 'ospa-appboard',\r\n    templateUrl: './appboard.component.html',\r\n    styleUrls: ['./appboard.component.scss'] // build error: Unknown version 67 of android\r\n})\r\nexport class AppboardComponent implements OnInit {\r\n    // #region Constructors\r\n\r\n    constructor(public appService: AppService, public portalService: PortalService, public router: Router) {\r\n        this.portalService.appService = this.appService;\r\n        this.portalService.areaNotification = new AreaNotification(this.portalService);\r\n        this.portalService.areaBlades = new AreaBlades(this.portalService);\r\n\r\n        this.appService.portalService = this.portalService;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n        setTimeout(() => { this.appService.appConfigService.appConfig.isShowSplashScreen = false; }, 500);\r\n\r\n        // TODO:2019-09-27/hp: convert NEW API to OLD - Copy TILES\r\n        //                     refactor this.portalService.panorama.startboard.tiles\r\n        //                       to use this.appService.appConfigService.appConfig.appboard\r\n        if (this.portalService.panorama.startboard.tiles.tiles.length == 0) {\r\n            this.appService.appConfigService.appConfig.appboard.forEach((item) => {\r\n                let tile = this.portalService.panorama.startboard.tiles.addTile(new Tile(item.title, item.routerPath, this.portalService));\r\n                tile.subTitle = item.subTitle;\r\n            });\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    navigateTo(routerPath): void {\r\n        this.appService.bladeService.navigateTo(routerPath);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ospa-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss'] // build error: Unknown version 67 of android\n})\nexport class PageNotFoundComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AppComponent } from './component/app/app.component';\r\nimport { AppboardComponent } from './component/dashboard/appboard/appboard.component';\r\nimport { PageNotFoundComponent } from './component/general/page-not-found/page-not-found.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: 'appboard', pathMatch: 'full' },\r\n    { path: 'appboard', component: AppboardComponent }, // AppComponent || AppboardComponent \r\n    { path: '**', component: PageNotFoundComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(routes) // , { enableTracing: true }\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n//import { MainOscService } from '@one-system/one-sys-core';\r\n\r\n@Component({\r\n    selector: 'ospa-splash-screen',\r\n    templateUrl: './splash-screen.component.html',\r\n    styleUrls: ['./splash-screen.component.scss'] // build error: Unknown version 67 of android\r\n})\r\nexport class SplashScreenComponent implements OnInit {\r\n    //constructor(public mainOscService: MainOscService) { }\r\n    constructor(/*public mainOscService: MainOscService*/) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { Directive, OnInit, OnDestroy, Input, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from \"@angular/core\";\r\nimport { Router, RouterOutlet, ChildrenOutletContexts } from \"@angular/router\";\r\n\r\n// #region README\r\n\r\n// <router-outlet> does not yet support a dynamic [name] attribute\r\n// During ng build, we get the following error:\r\n// > ERROR: Can't bind to 'name' since it isn't a known property of 'router-outlet'.\r\n// Therefore we have implemented this. Usage:\r\n// <router-outlet-named [name]=\"name1\">\r\n\r\n// #endregion\r\n\r\n@Directive({\r\n    selector: 'router-outlet-named',\r\n    exportAs: 'outlet'\r\n})\r\nexport class RouterOutletNamedDirective implements OnInit, OnDestroy {\r\n    // #region Properties\r\n\r\n    public outlet: RouterOutlet;\r\n    @Input() public name: string;\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    constructor(\r\n        private parentContexts: ChildrenOutletContexts,\r\n        private location: ViewContainerRef,\r\n        private resolver: ComponentFactoryResolver,\r\n        private changeDetector: ChangeDetectorRef,\r\n        private router: Router,\r\n    ) { }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n        this.outlet = new RouterOutlet(this.parentContexts, this.location, this.resolver, this.name, this.changeDetector);\r\n        this.outlet.ngOnInit();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.outlet) {\r\n            this.outlet.ngOnDestroy();\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","\r\nimport { Directive, ElementRef, Input, OnChanges } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[theming]'\r\n})\r\nexport class ThemingDirective implements OnChanges {\r\n    @Input('theming') theme: { [prop: string]: string };\r\n\r\n    constructor(private el: ElementRef<HTMLElement>) {\r\n    }\r\n\r\n    ngOnChanges() {\r\n        Object.keys(this.theme).forEach(prop => {\r\n            this.el.nativeElement.style.setProperty(`${prop}`, this.theme[prop]);\r\n        });\r\n    }\r\n}\r\n","import { NgModule, Optional, SkipSelf, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppConfig } from './domain/app-config';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppboardComponent } from '../lib/component/dashboard/appboard/appboard.component';\nimport { PageNotFoundComponent } from '../lib/component/general/page-not-found/page-not-found.component';\nimport { SplashScreenComponent } from '../lib/component/general/splash-screen/splash-screen.component';\n\nimport { AppComponent } from './component/app/app.component';\nimport { NavComponent } from './component/nav/nav.component';\nimport { GridComponent } from './component/grid/grid.component';\nimport { BladeComponent } from './component/blade/blade.component';\n\nimport { BladeService } from './service/blade/blade.service';\nimport { PortalService } from './domain/portal-service';\nimport { BrowserService } from './service/browser/browser.service';\n\nimport { RouterOutletNamedDirective } from './directive/router-outlet-named/router-outlet-named.directive';\nimport { ThemingDirective } from './directive/theming/theming.directive';\n\n@NgModule({\n    declarations: [\n        // Component\n        AppboardComponent,\n        PageNotFoundComponent,\n        SplashScreenComponent,\n        AppComponent,\n        NavComponent,\n        GridComponent,\n        BladeComponent,\n        // Directives\n        RouterOutletNamedDirective,\n        ThemingDirective\n    ],\n    providers: [\n        PortalService,\n        BladeService,\n        BrowserService\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        AppRoutingModule // Should be last, since it contains the ** route\n    ],\n    exports: [\n        // Component\n        AppComponent,\n        PageNotFoundComponent,\n        SplashScreenComponent,\n        NavComponent,\n        GridComponent,\n        BladeComponent,\n        // Directives\n        RouterOutletNamedDirective,\n        ThemingDirective\n    ]\n})\nexport class AngularPortalAzureModule {\n    constructor(@Optional() @SkipSelf() parentModule: AngularPortalAzureModule) {\n        if (parentModule) {\n            throw new Error(\n                'OneSysCoreModule is already loaded. Import it in only in one AppModule.');\n        }\n    }\n\n    static forRoot(appConfig: AppConfig): ModuleWithProviders {\n        return {\n            ngModule: AngularPortalAzureModule,\n            providers: [\n                { provide: AppConfig, useValue: appConfig }\n            ]\n        };\n    }\n}\n"]}