{"version":3,"sources":["ng://angular-portal-azure/lib/domain/dashboard/tile/tile-sizes.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tile-size.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tiles.ts","ng://angular-portal-azure/lib/domain/dashboard/appboard/appboard.ts","ng://angular-portal-azure/lib/domain/sidebar/sidebar.ts","ng://angular-portal-azure/lib/domain/app-config.ts","ng://angular-portal-azure/lib/service/app-config/app-config.service.ts","ng://angular-portal-azure/lib/service/blade/blade.service.ts","ng://angular-portal-azure/lib/service/injector/injector.service.ts","ng://angular-portal-azure/lib/service/app/app.service.ts","ng://angular-portal-azure/lib/domain/base/user-control-base.ts","ng://angular-portal-azure/lib/service/browser/viewport.ts","ng://angular-portal-azure/lib/service/browser/browser.service.ts","ng://angular-portal-azure/lib/domain/blade/blade.ts","ng://angular-portal-azure/lib/domain/dashboard/tile/tile.ts","ng://angular-portal-azure/lib/domain/dashboard/appboard/appboard-entry.ts","ng://angular-portal-azure/lib/domain/sidebar/sidebar-entry.ts","ng://angular-portal-azure/lib/domain/exception-dot-net.ts","ng://angular-portal-azure/lib/domain/exception.ts","ng://angular-portal-azure/lib/domain/user-control-base.ts","ng://angular-portal-azure/lib/domain/blade.ts","ng://angular-portal-azure/lib/domain/area-blades.ts","ng://angular-portal-azure/lib/domain/area-notification.ts","ng://angular-portal-azure/lib/domain/user-account.ts","ng://angular-portal-azure/lib/domain/avatar-menu.ts","ng://angular-portal-azure/lib/domain/tile-sizes.ts","ng://angular-portal-azure/lib/domain/tile-size.ts","ng://angular-portal-azure/lib/domain/tiles.ts","ng://angular-portal-azure/lib/domain/startboard.ts","ng://angular-portal-azure/lib/domain/panorama.ts","ng://angular-portal-azure/lib/domain/portal-service.ts","ng://angular-portal-azure/lib/domain/tile.ts","ng://angular-portal-azure/lib/component/app/app.component.ts","ng://angular-portal-azure/lib/component/blade/blade.component.ts","ng://angular-portal-azure/lib/component/grid/grid.component.ts","ng://angular-portal-azure/lib/component/nav/nav.component.ts","ng://angular-portal-azure/lib/component/dashboard/appboard/appboard.component.ts","ng://angular-portal-azure/lib/component/general/page-not-found/page-not-found.component.ts","ng://angular-portal-azure/lib/app-routing.module.ts","ng://angular-portal-azure/lib/component/general/splash-screen/splash-screen.component.ts","ng://angular-portal-azure/lib/directive/router-outlet-named/router-outlet-named.directive.ts","ng://angular-portal-azure/lib/directive/theming/theming.directive.ts","ng://angular-portal-azure/lib/angular-portal-azure.module.ts"],"names":["small","mini","normal","herowide","TileSize","tileSizes","width","height","this","getTileSizes","Array","push","TileSizes","Tiles","tiles","_i","arguments","length","_this","_super","apply","__spread","isShowTiles","isTilesLoaded","hideTileIfOnlyOne","nextLeft","nextTop","columnHeightMax","__extends","create","Object","prototype","forEach","tile","processTile","Appboard","appboardEntries","__spread$1","isVisible","object","Sidebar","sidebarEntries","__spread$2","AppConfig","appTitle","isShowSplashScreen","username","usernameTenant","appboard","blades","sidebar","AppConfigService","appConfig","Injectable","args","providedIn","BladeService","appConfigService","router","bladeId","events","pipe","filter","event","NavigationStart","subscribe","console","group","restoredState","log","navigationId","url","indexOf","pop","groupEnd","navigateTo","routerPath","config","route","path","outlet","navigate","outlets","_a","Router","InjectorService","setInjector","injector","getInjector","AppService","bladeService","Injector","UserControlBase","onActivate","onActivated","Viewport","fixedHeight","dynamicHeight","setBrowserWindow","browserWindow","browserWindowInnerHeight","innerHeight","browserWindowInnerWidth","innerWidth","addFixedHeight","BrowserService","viewport","defineProperty","window","Blade","title","subtitle","call","_bladeId","vm","visibility","subTitle","widthStackLayout","isInnerHtml","isCommandBrowse","commandBrowse","onCommandBrowse","commandBrowseText","isCommandCancel","commandCancel","onCommandCancel","commandCancelText","isCommandCopy","isCommandCopyEnabled","commandCopy","onCommandCopy","commandCopyText","isCommandDelete","isCommandDeleteEnabled","commandDelete","onCommandDelete","commandDeleteText","isCommandDocument","commandDocument","onCommandDocument","commandDocumentText","isCommandDocument2","commandDocument2","onCommandDocument2","commandDocument2Text","isCommandDocument3","commandDocument3","onCommandDocument3","commandDocument3Text","isCommandDocument4","commandDocument4","onCommandDocument4","commandDocument4Text","isCommandDocument5","commandDocument5","onCommandDocument5","commandDocument5Text","isCommandNew","commandNew","onCommandNew","commandNewText","isCommandOrder","commandOrder","onCommandOrder","commandOrderText","isCommandRestart","commandRestart","onCommandRestart","commandRestartText","isCommandSave","isCommandSaveEnabled","commandSave","onCommandSave","commandSaveText","isCommandSearch","commandSearch","onCommandSearch","commandSearchText","isCommandStart","commandStart","onCommandStart","commandStartText","isCommandStop","commandStop","onCommandStop","commandStopText","isCommandSwap","commandSwap","onCommandSwap","commandSwapText","isCommandExcel","commandExcel","onCommandExcel","commandExcelText","browserService","get","onResize","Error","setBladeHeights","toLowerCase","_path","newPath","ngOnInit","activate","onNavigateTo","value","comparePaths","path1","path2","close","onClose","bladeContentHeightInner","bladeContentHeight","Tile","bladePath","tileSize","_bladePath","newBladePath","clicked","AppboardEntry","iconClass","iconColor","SidebarEntry","ExceptionDotNet","ArgumentNullException","EntityValidationException","ValidationsExceptionDotNet","Exception","getOneLineMessage","exception","message","undefined","Message","debug","innerException","InnerException","Messages","item","index","ExceptionMessage","prepareException","response","createException","data","Data","processResponseData","json","_body","body","JSON","parse","Url","Status","status","StatusText","statusText","i","UserControlBase$1","portalService","statusBar","statusBarClass","$onDestroy","removeWindowResizeListener","ngOnDestroy","windowResizeHandler","$window","removeEventListener","setupWindowResizeListener","callback","id","addEventListener","clearTimeout","setTimeout","isNumberUndefinedNullOr0","isObjectNullUndefinedOrEmpty","keys","isStringNullOrEmpty","replace","getRandomString","Math","round","pow","random","toString","slice","clearStatusBar","setStatusBar","text","style","setStatusBarCopyData","setStatusBarLoadData","setStatusBarSaveData","setStatusBarDeleteData","setStatusBarDeleteDataCanceled","setStatusBarInfo","setStatusBarError","setStatusBarNoDataFound","setStatusBarException","isMaximize","isCommandMore","isNav","isGrid","isCommandBrowseEnabled","isCommandCancelEnabled","isCommandDocumentEnabled","isCommandDocument2Enabled","isCommandDocument3Enabled","isCommandDocument4Enabled","isCommandDocument5Enabled","isCommandNewEnabled","isCommandOrderEnabled","isCommandRestartEnabled","isCommandSearchEnabled","isCommandStartEnabled","isCommandStopEnabled","isCommandSwapEnabled","isCommandExcelEnabled","areaBlades","blade","clearPath","setTitle","watchExpression","func","AreaBlades","portalScroll","document","getElementById","setPortalScrollCss","raiseBladeOnActivateEvent","raiseAddBladeEvent","isBladeAlreadyShown","addBlade","pathSender","setFirstBlade","clearAll","hidePanorama","senderPath","portalcontent","clearChild","azureportalblades","getElementsByClassName","offsetLeft","sl","scrollLeft","showPanoramaIfNoBlades","isremoved","some","areaNotification","hide","clearLevel","level","clearLastLevel","panorama","a","startboard","showTiles","addBladeListener","areaNotificationShowListener","areaNotificationHideListener","marginRight","widthAreaUsed","AreaNotification","_width","_backgroundColor","calcualteCssStyles","onHide","display","show","onShow","onShowed","position","top","backgroundColor","borderLeft","left","UserAccount","firstName","lastName","userName","_firstName","_name","_lastName","AvatarMenu","userAccount","TileSize$1","Tiles$1","addTile","size","Startboard","Panorama","avatarMenu","PortalService","parameter","action","itemId","Tile$1","appService","AppComponent","themeProps","themes","black","--topbar-color","--topbar-background-color","--topbar-home-color","--blade-statusbar-background-color","--blade-commands-background-color","white","selectedTheme","setTheme","themeIndex","Component","selector","template","BladeComponent","GridComponent","NavComponent","AppboardComponent","PageNotFoundComponent","routes","redirectTo","pathMatch","component","AppRoutingModule","NgModule","imports","RouterModule","forRoot","exports","SplashScreenComponent","RouterOutletNamedDirective","parentContexts","location","resolver","changeDetector","RouterOutlet","name","Directive","exportAs","ChildrenOutletContexts","ViewContainerRef","ComponentFactoryResolver","ChangeDetectorRef","Input","ThemingDirective","el","ngOnChanges","theme","prop","nativeElement","setProperty","ElementRef","AngularPortalAzureModule","parentModule","ngModule","providers","provide","useValue","declarations","CommonModule","FormsModule","decorators","type","Optional","SkipSelf"],"mappings":"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","sourcesContent":["/** The names are used in CSS for layouting, e.g. style='mini' */\r\nexport enum TileSizes {\r\n    small,\r\n    mini,\r\n    normal,\r\n    herowide\r\n}\r\n","import { TileSizes } from './tile-sizes';\r\n\r\nexport class TileSize {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public tileSizes: TileSizes, public width: number, public height: number) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Static Methods\r\n\r\n    static getTileSizes(): Array<TileSize> {\r\n        let tileSizes = Array<TileSize>();\r\n\r\n        tileSizes.push(new TileSize(TileSizes.small, 90, 90));\r\n        tileSizes.push(new TileSize(TileSizes.mini, 180, 90));\r\n        tileSizes.push(new TileSize(TileSizes.normal, 180, 180));\r\n        tileSizes.push(new TileSize(TileSizes.herowide, 540, 360));\r\n\r\n        return tileSizes;\r\n    }\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Tile } from './tile';\r\nimport { TileSize } from './tile-size';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tiles<T extends Tile> extends Array<T>  {\r\n    // #region Properties\r\n\r\n    //tiles: Array<T> = new Array<T>();\r\n    isShowTiles: boolean = true;\r\n    isTilesLoaded: boolean = false;\r\n    hideTileIfOnlyOne: boolean = true;  // not yet evaluated in HTML, but this is the standard behavior\r\n\r\n    tileSizes = TileSize.getTileSizes();\r\n    nextLeft: number = 0;\r\n    nextTop: number = 0;\r\n    columnHeightMax: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(...tiles: Array<T>) {\r\n        super(...tiles);\r\n        //this.tiles = tiles;\r\n    }\r\n\r\n    static create<Apps>(): Apps {\r\n        let object = Object.create(Tiles.prototype);\r\n        return object;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...tiles: Array<T>): number {\r\n        tiles.forEach((tile) => {\r\n            this.processTile(tile);\r\n        });\r\n\r\n        return super.push(...tiles);\r\n    }\r\n\r\n    processTile(tile: T): T {\r\n        return;\r\n        //this.isTilesLoaded = true;\r\n        let tileSize = this.tileSizes[tile.tileSize];\r\n        tile.size = TileSizes[tile.tileSize];  // Get CSS Name\r\n\r\n        tile.top = this.nextTop + 'px';\r\n        tile.left = this.nextLeft + 'px';\r\n\r\n        this.nextLeft += tileSize.width;\r\n\r\n        if (tileSize.height > this.columnHeightMax) {\r\n            this.columnHeightMax = tileSize.height;\r\n        }\r\n\r\n        if (this.nextLeft > 540) {\r\n            this.nextLeft = 0;\r\n            this.nextTop += this.columnHeightMax;\r\n            this.columnHeightMax = 0;\r\n        }\r\n\r\n        //this.tiles.push(tile);\r\n\r\n        return tile;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Tiles } from '../tile/tiles';\r\nimport { TileSize } from '../tile/tile-size';\r\nimport { AppboardEntry } from './appboard-entry';\r\n\r\nexport class Appboard extends Tiles<AppboardEntry> {\r\n    // #region Properties\r\n\r\n    isVisible: boolean = true;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(...appboardEntries: Array<AppboardEntry>) {\r\n        super(...appboardEntries);\r\n        this.tileSizes = TileSize.getTileSizes();\r\n        this.nextLeft = 0;\r\n        this.nextTop = 0;\r\n        this.columnHeightMax = 0;\r\n    }\r\n\r\n    static create<Appboard>(): Appboard {\r\n        let object = Object.create(Appboard.prototype);\r\n        object.tileSizes = TileSize.getTileSizes();\r\n        object.nextLeft = 0;\r\n        object.nextTop = 0;\r\n        object.columnHeightMax = 0;\r\n        return object;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...appboardEntries: Array<AppboardEntry>): number {\r\n        return super.push(...appboardEntries);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { SidebarEntry } from './sidebar-entry';\r\n\r\nexport class Sidebar extends Array<SidebarEntry> {\r\n    // #region Properties\r\n\r\n    isVisible: boolean = true;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    private constructor(sidebarEntries?: Array<SidebarEntry>) {\r\n        super(...sidebarEntries);\r\n    }\r\n\r\n    static create<Sidebars>(): Sidebars {\r\n        return Object.create(Sidebar.prototype);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    push(...sidebarEntries: Array<SidebarEntry>): number {\r\n        return super.push(...sidebarEntries);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Appboard } from \"./dashboard/appboard/appboard\";\r\nimport { Blade } from \"./blade/blade\";\r\n//import { Blades } from \"./blade/blades\";\r\nimport { Sidebar } from \"./sidebar/sidebar\";\r\n\r\nexport class AppConfig {\r\n    // #region Properties\r\n\r\n    appTitle: string = 'One-System Portal Azure';\r\n    isShowSplashScreen: boolean = true;\r\n    username: string = 'user@one-system.domain';\r\n    usernameTenant: string = 'One-System';\r\n\r\n    appboard: Appboard = Appboard.create();\r\n    blades: Blade[] = []; // Blades.create();\r\n    sidebar: Sidebar = Sidebar.create();\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor() {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { AppConfig } from '../../domain/app-config';\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class AppConfigService {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public appConfig: AppConfig) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart, Event as NavigationEvent } from '@angular/router';\r\n\r\nimport { filter } from \"rxjs/operators\";\r\n\r\nimport { AppConfigService } from '../app-config/app-config.service';\r\n\r\nimport { Blade } from '../../domain/blade/blade';\r\n\r\n@Injectable()\r\nexport class BladeService {\r\n    // #region Properties\r\n\r\n    bladeId: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(private appConfigService: AppConfigService, private router: Router) {\r\n        // #region Handle router events\r\n\r\n        this.router.events\r\n            .pipe(\r\n                // The \"events\" stream contains all the navigation events. For this demo,\r\n                // though, we only care about the NavigationStart event as it contains\r\n                // information about what initiated the navigation sequence.\r\n                filter((event: NavigationEvent) => {\r\n                    return (event instanceof NavigationStart);\r\n                })\r\n            )\r\n            .subscribe(\r\n                (event: NavigationStart) => {\r\n                    console.group('NavigationStart');\r\n                    //// Every navigation sequence is given a unique ID. Even \"popstate\"\r\n                    //// navigations are really just \"roll forward\" navigations that get\r\n                    //// a new, unique ID.\r\n                    //console.log(\"navigation id:\", event.id);\r\n                    //console.log(\"route:\", event.url);\r\n                    //// The \"navigationTrigger\" will be one of:\r\n                    //// --\r\n                    //// - imperative (ie, user clicked a link).\r\n                    //// - popstate (ie, browser controlled change such as Back button).\r\n                    //// - hashchange\r\n                    //// --\r\n                    //// NOTE: I am not sure what triggers the \"hashchange\" type.\r\n                    //console.log(\"trigger:\", event.navigationTrigger);\r\n\r\n                    // This \"restoredState\" property is defined when the navigation\r\n                    // event is triggered by a \"popstate\" event (ex, back / forward\r\n                    // buttons). It will contain the ID of the earlier navigation event\r\n                    // to which the browser is returning.\r\n                    // --\r\n                    // CAUTION: This ID may not be part of the current page rendering.\r\n                    // This value is pulled out of the browser; and, may exist across\r\n                    // page refreshes.\r\n                    if (event.restoredState) {\r\n                        console.log(\"restoring navigation id:\", event.restoredState.navigationId);\r\n                        if (event.url.indexOf('(blade') < 0) {\r\n                            console.log('reset appboard visibility')\r\n                            this.appConfigService.appConfig.appboard.isVisible = true;\r\n                        } else {\r\n                            this.appConfigService.appConfig.blades.pop();\r\n                        }\r\n                    }\r\n\r\n                    console.groupEnd();\r\n                });\r\n\r\n        // #endregion\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    navigateTo(routerPath: string): void {\r\n        this.router.config.forEach((route) => {\r\n            if (route.path === routerPath) {\r\n                this.bladeId = this.bladeId + 1;\r\n                route.outlet = 'blade' + this.bladeId;\r\n                this.appConfigService.appConfig.blades.push({ bladeId: 'blade' + this.bladeId } as Blade);\r\n                this.router.navigate([{ outlets: { ['blade' + this.bladeId]: [routerPath] } }]);\r\n            }\r\n        });\r\n\r\n        if (this.appConfigService.appConfig.blades.length > 0) {\r\n            this.appConfigService.appConfig.appboard.isVisible = false;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","// https://devblogs.microsoft.com/premier-developer/angular-how-to-simplify-components-with-typescript-inheritance/\r\n\r\nimport { Injector } from '@angular/core';\r\n\r\nexport class InjectorService {\r\n    // #region Properties\r\n\r\n    private static injector: Injector = null;\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    static setInjector(injector: Injector) {\r\n        InjectorService.injector = injector;\r\n    }\r\n\r\n    static getInjector(): Injector {\r\n        return InjectorService.injector;\r\n    }\r\n\r\n    // #endregion\r\n}       \r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { PortalService } from '../../domain/portal-service';\r\n\r\nimport { AppConfigService } from '../app-config/app-config.service'\r\nimport { BladeService } from '../blade/blade.service'\r\nimport { InjectorService } from '../injector/injector.service'\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class AppService {\r\n    // #region Constructors\r\n\r\n    //constructor(title: string = null) {\r\n    constructor(\r\n        public appConfigService: AppConfigService,\r\n        public bladeService: BladeService,\r\n        injector: Injector\r\n    ) {\r\n        InjectorService.setInjector(injector);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    portalService: PortalService;\r\n}\r\n","//import { MainService } from '../../service/main/main.service';\r\n//import { BrowserWindowService } from '../service/base/browser-window.service';\r\n\r\nexport class UserControlBase {\r\n    // #region Properties\r\n\r\n    //browserWindowService: BrowserWindowService;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // public mainService: MainService\r\n    constructor() {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n    /** Override */\r\n    onActivate(): void {\r\n    }\r\n\r\n    /** Override */\r\n    onActivated(): void {\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","export class Viewport {\r\n    // #region Properties\r\n\r\n    browserWindowInnerHeight: number;       // provided by the browser itself\r\n    browserWindowInnerWidth: number;        // provided by the browser itself\r\n\r\n    private fixedHeight: number = 0;       // contains the heights of all the fixed area in the browser | 20 is the scroller\r\n    dynamicHeight: number = 0;              // calculated Height (browserWindowInnerHeight - fixedHeight)\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    setBrowserWindow(browserWindow: Window) {\r\n        this.browserWindowInnerHeight = browserWindow.innerHeight;\r\n        this.browserWindowInnerWidth = browserWindow.innerWidth;\r\n        this.dynamicHeight = this.browserWindowInnerHeight - this.fixedHeight;\r\n    }\r\n\r\n    addFixedHeight(height: number) {\r\n        this.fixedHeight = this.fixedHeight + height;\r\n        this.dynamicHeight = this.browserWindowInnerHeight - this.fixedHeight;\r\n    }\r\n\r\n    log(): void {\r\n        console.group('Viewport');\r\n        console.log(`browserWindowInnerHeight: ${this.browserWindowInnerHeight}`);\r\n        console.log(`browserWindowInnerWidth: ${this.browserWindowInnerWidth}`);\r\n        console.log(`dynamicHeight: ${this.dynamicHeight}`);\r\n        console.log(`fixedHeight: ${this.fixedHeight}`);\r\n        console.groupEnd();\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","// More information: https://brianflove.com/2018/01/11/angular-window-provider/\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { throttleTime, startWith, map } from 'rxjs/operators';\r\n\r\nimport { Viewport } from './viewport';\r\n//import { pipe } from '@angular/core/src/render3';\r\n\r\n// #region Global JavaScript Functions\r\n\r\nfunction getWindow(): any {\r\n    return window;\r\n}\r\n\r\n// #endregion\r\n\r\n@Injectable({\r\n    providedIn: 'root' // singleton: should be provided in the application root\r\n})\r\nexport class BrowserService {\r\n    // #region Properties\r\n\r\n    get browserWindow(): Window {\r\n        return getWindow();\r\n    }\r\n\r\n    private viewport: Viewport;\r\n\r\n    onResize: Observable<Viewport>;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor() {\r\n        this.viewport = new Viewport();\r\n        this.viewport.addFixedHeight(40);\r\n        this.viewport.setBrowserWindow(this.browserWindow); // Initialize values\r\n\r\n        console.log('commented code at : BrowserService.constructor');\r\n        //this.onResize = fromEvent(this.browserWindow, 'resize')\r\n        //    .pipe(\r\n        //        throttleTime(20),\r\n        //        map((event) => {\r\n        //            this.viewport.setBrowserWindow(<Window>event.currentTarget);\r\n        //            return this.viewport;\r\n        //        }),\r\n        //        startWith(this.viewport),\r\n        //        //tap(viewport => console.log(viewport))\r\n        //    );\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { StatusBar } from './../status-bar';\r\nimport { UserControlBase } from './../base/user-control-base';\r\n\r\nimport { BrowserService } from '../../service/browser/browser.service';\r\nimport { InjectorService } from '../../service/injector/injector.service';\r\n\r\nimport { Viewport } from '../../service/browser/viewport';\r\n\r\nexport class Blade extends UserControlBase {\r\n    // #region Properties\r\n\r\n    private browserService: BrowserService;\r\n    viewport: Viewport = new Viewport();\r\n\r\n    // bladeId: string = '';\r\n    private _bladeId: string = '';\r\n    get bladeId(): string {\r\n        return this._bladeId;\r\n    }\r\n    set bladeId(bladeId: string) {\r\n        if (bladeId == null) { return; }\r\n        this._bladeId = bladeId.toLowerCase();\r\n    }\r\n\r\n    /** HACK:2016-11-06/hp: [angular-portal-blade] needs [this] as the controller.\r\n    We don't know how to provide [this] to the directive.\r\n    So we came up with this [vm] property.*/\r\n    vm: any = {};\r\n\r\n    statusBar: StatusBar;\r\n\r\n    visibility: string = 'collapse';\r\n\r\n    private watcherTitle: () => void;\r\n\r\n    bladeContentHeight: number;\r\n    bladeContentHeightInner: number;\r\n\r\n    title: string = '';\r\n    subTitle: string = '';\r\n    width = '0';\r\n    widthStackLayout = { 'width': '50px' };\r\n\r\n    height = '0';\r\n\r\n    isInnerHtml: boolean = true;\r\n\r\n    formblade: any; // angular.IFormController; // name of the ng-form directive\r\n\r\n    // #region path\r\n\r\n    private _path: string;\r\n    get path(): string {\r\n        return this._path;\r\n    }\r\n    // For the moment we do distinguish between lower and upper case path name\r\n    set path(newPath: string) {\r\n        if (newPath == null) { return; }\r\n        this._path = newPath.toLowerCase();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Commands\r\n\r\n    isCommandBrowse: boolean = false;\r\n    commandBrowse: () => void = () => { this.onCommandBrowse(); };\r\n    commandBrowseText: string = '';\r\n\r\n    isCommandCancel: boolean = false;\r\n    commandCancel: () => void = () => { this.onCommandCancel(); };\r\n    commandCancelText: string = '';\r\n\r\n    isCommandCopy: boolean = false;\r\n    isCommandCopyEnabled: boolean = true;\r\n    commandCopy: () => void = () => { this.onCommandCopy(); };\r\n    commandCopyText: string = '';\r\n\r\n    isCommandDelete: boolean = false;\r\n    isCommandDeleteEnabled: boolean = true;\r\n    commandDelete: () => void = () => { this.onCommandDelete(); };\r\n    commandDeleteText: string = '';\r\n\r\n    isCommandDocument: boolean = false;\r\n    commandDocument: () => void = () => { this.onCommandDocument(); };\r\n    commandDocumentText: string = '';\r\n\r\n    isCommandDocument2: boolean = false;\r\n    commandDocument2: () => void = () => { this.onCommandDocument2(); };\r\n    commandDocument2Text: string = '';\r\n\r\n    isCommandDocument3: boolean = false;\r\n    commandDocument3: () => void = () => { this.onCommandDocument3(); };\r\n    commandDocument3Text: string = '';\r\n\r\n    isCommandDocument4: boolean = false;\r\n    commandDocument4: () => void = () => { this.onCommandDocument4(); };\r\n    commandDocument4Text: string = '';\r\n\r\n    isCommandDocument5: boolean = false;\r\n    commandDocument5: () => void = () => { this.onCommandDocument5(); };\r\n    commandDocument5Text: string = '';\r\n\r\n    isCommandNew: boolean = false;\r\n    commandNew: () => void = () => { this.onCommandNew(); };\r\n    commandNewText: string = '';\r\n\r\n    isCommandOrder: boolean = false;\r\n    commandOrder: () => void = () => { this.onCommandOrder(); };\r\n    commandOrderText: string = '';\r\n\r\n    isCommandRestart: boolean = false;\r\n    commandRestart: () => void = () => { this.onCommandRestart(); };\r\n    commandRestartText: string = '';\r\n\r\n    isCommandSave: boolean = false;\r\n    isCommandSaveEnabled: boolean = true;\r\n    commandSave: () => void = () => { this.onCommandSave(); };\r\n    commandSaveText: string = '';\r\n\r\n    isCommandSearch: boolean = false;\r\n    commandSearch: () => void = () => { this.onCommandSearch(); };\r\n    commandSearchText: string = '';\r\n\r\n    isCommandStart: boolean = false;\r\n    commandStart: () => void = () => { this.onCommandStart(); };\r\n    commandStartText: string = '';\r\n\r\n    isCommandStop: boolean = false;\r\n    commandStop: () => void = () => { this.onCommandStop(); };\r\n    commandStopText: string = '';\r\n\r\n    isCommandSwap: boolean = false;\r\n    commandSwap: () => void = () => { this.onCommandSwap(); };\r\n    commandSwapText: string = '';\r\n\r\n    isCommandExcel: boolean = false;\r\n    commandExcel: () => void = () => { this.onCommandExcel(); };\r\n    commandExcelText: string = '';\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // mainService: MainService, \r\n    constructor(path: string = '', title: string = '', subtitle: string = '', width: number = 200) {\r\n        super();\r\n        this.browserService = InjectorService.getInjector().get(BrowserService);\r\n        this.browserService.onResize.subscribe((viewport) => this.viewport = viewport);\r\n\r\n        this.vm = this;\r\n        this.path = path;\r\n        this.title = title;\r\n        this.subTitle = subtitle;\r\n        this.width = width + 'px';\r\n        this.widthStackLayout.width = width - 50 + 'px';  // 50 = padding (left and right)\r\n\r\n        //if (!mainService) { throw new Error('[Blade] constructor parameter \\'mainService\\' must be provided.'); }\r\n        if (!path) { throw new Error('[Blade] constructor parameter \\'path\\' must be a string.'); }\r\n        if (!title && title !== '') { throw new Error('[Blade] constructor parameter \\'title\\' must be a string when provided.'); }\r\n        if (!subtitle && subtitle !== '') { throw new Error('[Blade] constructor parameter \\'subtitle\\' must be a string when provided.'); }\r\n        if (!width && width !== 0) { throw new Error('[Blade] constructor parameter \\'width\\' must be a number when provided.'); }\r\n\r\n        if (width < 50) { throw new Error('[Blade] constructor parameter \\'width\\' must be at least 50.'); }\r\n\r\n        // Set 'this.mainService.areaBlades.blades[index]' to 'this'\r\n        //     'this.mainService.areaBlades.blades[index]' was generated during AddBlade\r\n        //this.mainService.areaBlades.blades.forEach((blade, index) => {\r\n        //    if (blade.path != null && this.path != null && blade.path.toLowerCase() === this.path.toLowerCase()) {\r\n        //        this.mainService.areaBlades.blades[index] = this;\r\n        //    }\r\n        //});\r\n\r\n        //this.browserWindow.setupWindowResizeListener(() => { this.setBladeHeights(); });\r\n        this.setBladeHeights();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n        console.log('ngOnInit');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    activate(): void {\r\n        this.onActivate();\r\n        this.onActivated();\r\n    }\r\n\r\n    navigateTo(path: any) {\r\n        this.onNavigateTo(path);\r\n    }\r\n\r\n    /** Must be overridden. */\r\n    onNavigateTo(value: any): void {\r\n        throw new Error('[Blade] \\'onNavigateTo\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    // At the moment we do not distinguish between lower and upper case path name\r\n    comparePaths(path1: string, path2: string): boolean {\r\n        if (path1 == null) { return false; }\r\n        if (path2 == null) { return false; }\r\n        if (path1.toLowerCase() === path2.toLowerCase()) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /** close blade. */\r\n    close() {\r\n        if (!this.onClose) {\r\n            return; // do not close blade\r\n        }\r\n\r\n        //if (this.mainService.areaBlades !== undefined) {\r\n        //    this.mainService.areaBlades.clearPath(this.path);\r\n        //} else {\r\n        //    throw new Error('[Blade] path: \\'' + this.path + '\\' could not be removed, since no \\'this.mainService.areaBlades\\' available.');\r\n        //}\r\n    }\r\n\r\n    /** Override */\r\n    onClose(): boolean {\r\n        return true;\r\n    }\r\n\r\n    ///** Change title, as soon as watchExpression changes. watchExpression is either a variable ore an expression, e.g. [name1 + name2] */\r\n    //setTitle(watchExpression: string, func: () => void) {\r\n    //    if (this.watcherTitle === undefined) {\r\n    //        if (this.$scope !== null) {\r\n    //            // angular1\r\n    //            this.watcherTitle = this.$scope.$watch(watchExpression, () => { func(); });\r\n    //            this.$scope.$on('$destroy', () => { this.watcherTitle(); });\r\n    //        } else {\r\n    //            // angular2\r\n    //        }\r\n    //    }\r\n    //}\r\n\r\n    // #region Commands\r\n\r\n    onCommandBrowse(): void {\r\n        throw new Error('[Blade] \\'onCommandBrowse\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandCancel(): void {\r\n        throw new Error('[Blade] \\'onCommandCancel\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandCopy(): void {\r\n        throw new Error('[Blade] \\'onCommandCopy\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDelete(): void {\r\n        throw new Error('[Blade] \\'onCommandDelete\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument2(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument2\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument3(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument3\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument4(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument4\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandDocument5(): void {\r\n        throw new Error('[Blade] \\'onCommandDocument5\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandNew(): void {\r\n        throw new Error('[Blade] \\'onCommandNew\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandOrder(): void {\r\n        throw new Error('[Blade] \\'onCommandOrder\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandRestart(): void {\r\n        throw new Error('[Blade] \\'onCommandRestart\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSave(): void {\r\n        throw new Error('[Blade] \\'onCommandSave\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSearch(): void {\r\n        throw new Error('[Blade] \\'onCommandSearch\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandStart(): void {\r\n        throw new Error('[Blade] \\'onCommandStart\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandStop(): void {\r\n        throw new Error('[Blade] \\'onCommandStop\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandSwap(): void {\r\n        throw new Error('[Blade] \\'onCommandSwap\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    onCommandExcel(): void {\r\n        throw new Error('[Blade] \\'onCommandExcel\\' is an abstract function. Define one in the derived class.');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    private setBladeHeights(): void {\r\n        //this.bladeContentHeight = this.mainService.browserWindowService.browserWindow.innerHeight - 40 - 125; // 40 = topbar, 125 = blade header\r\n        this.bladeContentHeightInner = this.bladeContentHeight - 50 - 3; // 50 = padding (top and bottom), somehow we miss 3px\r\n\r\n        // this.mainService.$timeout(() => {\r\n        // }, 50);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","//import { MainService } from '../../../service/main/main.service';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tile {\r\n    // #region Properties\r\n\r\n    //mainService: MainService;\r\n\r\n    title: string;\r\n    subTitle: string;\r\n\r\n    tileSize: TileSizes;\r\n    size: string; // CSS style class name - refactoring: rename to cssClass\r\n\r\n    left: string; // left position (CSS)\r\n    top: string; // top position (CSS)\r\n\r\n    private _bladePath: string;\r\n    get bladePath(): string {\r\n        return this._bladePath;\r\n    }\r\n\r\n    // For the moment we do not distinguish between lower and upper case path name\r\n    set bladePath(newBladePath: string) {\r\n        this._bladePath = newBladePath.toLowerCase();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    // mainService: MainService, \r\n    constructor(title: string, bladePath: string) {\r\n        //this.mainService = mainService;\r\n\r\n        this.title = title;\r\n        this.bladePath = bladePath;\r\n        this.tileSize = TileSizes.normal;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    clicked() {\r\n        //this.mainService.areaBlades.setFirstBlade(this.bladePath);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Private Methods\r\n\r\n    // #endregion\r\n}\r\n","//import { MainService } from '../../../service/main/main.service';\r\nimport { Tile } from '../tile/tile';\r\n\r\nexport class AppboardEntry extends Tile {\r\n    // #region Properties\r\n\r\n    //mainService: MainService\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public title: string, public routerPath: string, public subTitle: string = '', public iconClass: string = '', public iconColor: string = '') {\r\n        super(title, routerPath);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","export class SidebarEntry {\r\n    // #region Properties\r\n\r\n    // #endregion\r\n\r\n    // #region Constructors\r\n\r\n    constructor(public title: string, public routerPath: string, public iconClass: string = null) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    // #endregion\r\n}\r\n","export class ValidationResultDotNet {\n    ErrorMessage: string;\n    MemberNames: string[];\n}\n\nexport class ExceptionDotNet {\n    // .NET Exception (the following fields are transmitted over the wire)\n    ClassName: string | void;\n    Data: { key: number, value: string }[] | null;\n    ExceptionMethod: string | void;\n    HelpURL: string | null | void;\n    HelpLink: string | null | void;\n    HResult: number;\n    InnerException: ExceptionDotNet | null;\n    Message: string | null;\n    RemoteStackIndex: number | void;\n    RemoteStackTraceString: string | null | void;\n    Source: string;\n    StackTrace: string;\n    WatsonBuckets: string | null | void;\n\n    /**\n     *  @deprecated ExceptionMessage is obsolete\n     */\n    ExceptionMessage: string | void;\n    /**\n     *  @deprecated ExceptionType is obsolete\n     */\n    ExceptionType: string | void;\n}\n\nexport class ArgumentNullException extends ExceptionDotNet {\n    ParamName: string;\n}\n\nexport class EntityValidationException extends ExceptionDotNet {\n    Data: { key: number, value: string }[];\n    ValidationResults: ValidationResultDotNet[];\n\n    //public convertResponse(response: any) {\n    //    if (response.headers === undefined) {\n    //        console.debug('EntityValidationException.convertResponse - response.data');\n    //        ValidationsExceptionDotNet.convertResponse(this, response.data);\n    //        ValidationsExceptionDotNet.convertExceptionType(this, response.data);\n    //    } else {\n    //        console.debug('EntityValidationException.convertResponse - response.json()');\n    //        ValidationsExceptionDotNet.convertResponse(this, response.json());\n    //        ValidationsExceptionDotNet.convertExceptionType(this, response.json());\n    //    }\n    //}\n\n    //protected static convertResponse(exceptionTo: EntityValidationException | ValidationsExceptionDotNet, responseDataFrom: ExceptionDotNet): void {\n    //    console.debug('EntityValidationException.convertResponse');\n\n    //    exceptionTo.ExceptionMessage = responseDataFrom.ExceptionMessage;\n    //    exceptionTo.Message = responseDataFrom.Message;\n    //    exceptionTo.StackTrace = responseDataFrom.StackTrace;\n    //    exceptionTo.InnerException = responseDataFrom.InnerException;\n    //}\n\n    //protected static convertExceptionType(exception: EntityValidationException | ValidationsExceptionDotNet, responseData: any): void {\n    //    if (responseData.ExceptionType === undefined) {\n    //        console.debug('EntityValidationException.convertExceptionType - undefined');\n    //        return;\n    //    }\n    //    else if (responseData.ExceptionType === 'System.Data.Entity.Validation.DbEntityValidationException') {\n    //        console.debug('EntityValidationException.convertExceptionType - DbEntityValidationException');\n    //        exception.ExceptionType = 'DbEntityValidationException';\n    //        return;\n    //    }\n    //    else if (responseData.ExceptionType === 'System.Data.Entity.Infrastructure.DbUpdateConcurrencyException') {\n    //        console.debug('EntityValidationException.convertExceptionType - DbUpdateConcurrencyException');\n    //        exception.ExceptionType = 'DbUpdateConcurrencyException';\n    //        return;\n    //    }\n    //    else if (responseData.ClassName !== undefined && responseData.ClassName.indexOf('ValidationsException') > 0) {\n    //        console.debug('EntityValidationException.convertExceptionType - ValidationsException');\n    //        exception.ExceptionType = 'ValidationsException';\n    //        return;\n    //    }\n    //    else {\n    //        console.debug('EntityValidationException.convertExceptionType - else');\n    //        exception.ExceptionType = responseData.ExceptionType;\n    //    }\n    //}\n}\n\n/**\n *  @deprecated ValidationsExceptionDotNet should be replaced by EntityValidationException\n */\nexport class ValidationsExceptionDotNet extends EntityValidationException {\n}\n","import { ValidationsExceptionDotNet } from './exception-dot-net';\n\nexport class Exception extends ValidationsExceptionDotNet {\n    // #region Properties\n\n    // HTTP Server\n    Type: string;\n    MessageDetail: string;\n    Messages: string[];\n    Status: number | undefined;\n    StatusText: string | undefined;\n    Url: string;\n\n    // #endregion\n\n    // #region Static Methods\n\n    static getOneLineMessage(exception: Exception): string {\n        let message: string = '';\n\n        if (exception.Message !== undefined) {\n            if (exception.Message.toLowerCase().indexOf('cannot insert duplicate key in object') >= 0\n                || exception.Message.toLowerCase().indexOf('the duplicate key value is') >= 0) {\n                console.debug(exception.Message);\n                return 'Datensatz mit gleichem Key (SchlÃÂ¼ssel) bereits vorhanden!';\n            }\n\n            if (exception.Message.toLowerCase().indexOf('the delete statement conflicted with the reference constraint') >= 0) {\n                console.debug(exception.Message);\n                return 'Datensatz kann nicht gelÃÂ¶scht werden, da noch abhÃÂ¤ngige Daten vorhanden sind!';\n            }\n\n            if (exception.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                // Frist innerException\n                let innerException = exception.InnerException;\n                if (exception.InnerException.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                    // Second innerException\n                    let innerException = exception.InnerException.InnerException;\n                    if (exception.InnerException.InnerException.Message.toLowerCase().indexOf('see the inner exception for details') >= 0) {\n                        // Third innerException\n                        let innerException = exception.InnerException.InnerException.InnerException;\n                    }\n                }\n                console.debug(exception);\n                return innerException.Message;\n            }\n\n            message = message + exception.Message + ' ';\n            return message;\n        }\n\n        if (exception.Messages !== undefined) {\n            if (exception.Messages.length > 0) {\n                message = '';\n                exception.Messages.forEach((item, index) => {\n                    if (index > 0) {\n                        message = message + ' - ';\n                    }\n                    message = message + item;\n                });\n                return message;\n            }\n        }\n\n        if (exception.ExceptionMessage !== undefined && (<string>exception.ExceptionMessage).toLowerCase().indexOf('see the inner exception for details') < 0) {\n            message = message + ': ' + exception.ExceptionMessage + ' ';\n            return message;\n        }\n\n        if (exception.ExceptionMessage !== undefined && (<string>exception.ExceptionMessage).toLowerCase().indexOf('see the inner exception for details') >= 0) {\n            if (exception.InnerException !== undefined) {\n                if (exception.InnerException.InnerException !== undefined) {\n                    message = message + ': ' + exception.InnerException.InnerException.ExceptionMessage + ' ';\n                    return message;\n                } else {\n                    message = message + ': ' + exception.InnerException.ExceptionMessage + ' ';\n                    return message;\n                }\n            }\n        }\n\n        // Default handler\n        console.debug(exception);\n        message = message + ': JavaScript-Fehler oder Probleme mit der Internetverbindung. Weitere Informationen im Log (change log to full = debug). ' + exception;\n\n        return message;\n    }\n\n    // TODO:2018-10-10/hp: [angular.IHttpPromiseCallbackArg<Exception>] should be Response\n    static prepareException(response: Promise<Exception> | any): Exception {\n        let exception = Exception.createException();\n\n        // #region Process (Angular 1) response.data.Data\n\n        if (response.data !== undefined && response.data.Data !== undefined) {\n            exception = Exception.processResponseData(exception, response.data.Data);\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response.json().Data (EntityValidationException, etc.)\n\n        else if (response.json !== undefined && response.json().Data != undefined) {\n            exception = Exception.processResponseData(exception, response.json().Data);\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response._body\n\n        else if (response._body !== undefined) {\n            var body = JSON.parse(response._body);\n            if (body.Message) {\n                exception.Message = body.Message;\n            }\n        }\n\n        // #endregion\n\n        // #region Process (Angular 2) response.InnerException.InnerException.Message\n\n        else if (response.json !== undefined && response.json !== null\n            && response.json().InnerException !== undefined && response.json().InnerException !== null\n            && response.json().InnerException.InnerException !== undefined && response.json().InnerException.InnerException !== null) {\n            exception.Message = response.json().InnerException.InnerException.Message;\n        }\n\n        // #endregion\n\n        //exception.convertResponse(response);\n\n        exception.Url = response.url;\n        exception.Status = response.status;\n        exception.StatusText = response.statusText;\n\n        return exception;\n    }\n\n    private static createException(): Exception {\n        let exception: Exception = new Exception();\n        exception.Messages = [];\n        return exception;\n    }\n\n    //private static processResponseWithData(exception: Exception, response: angular.IHttpPromiseCallbackArg<Exception>): Exception {\n    //    console.debug('Exception.processResponseWithData');\n    //    // #region Convert data to Messages\n\n    //    if (response.data.Data === undefined) {\n    //        exception.Messages.push('No further information found in [response.data.Data].');\n    //        exception.Messages.push('No further information found in [response.data.Data].');\n    //    } else {\n\n    //        let i = 1;\n    //        while (response.data.Data[i + ''] !== undefined) {\n    //            console.debug('Add to exception.Messages : ' + response.data.Data[i + '']);\n    //            exception.Messages.push(response.data.Data[i + '']);\n    //            i++;\n    //        }\n    //    }\n\n    //    // #endregion\n\n    //    return exception;\n    //}\n\n    private static processResponseData(exception: Exception, data: any[]): Exception {\n        let i = 1;\n        while (data[i + ''] !== undefined) {\n            exception.Messages.push(data[i + '']);\n            i++;\n        }\n\n        return exception;\n    }\n\n    // TODO:2017-01-09/hp: Implement this function for angular2\n    //private static processDotNetException2(exception: Exception, response: any): Exception {\n    //    console.debug('Exception.processDotNetException2');\n\n    //    if (response.json().data !== undefined) {\n    //        console.debug('[Exception.processDotNetException2] not implemented. Implement it to get proper exception data.');\n    //    }\n\n    //    return exception;\n    //}\n\n    // #endregion\n}\n","import { UserAccount } from './user-account';\nimport { PortalService } from './portal-service';\nimport { Exception } from './exception';\n\n\nexport class UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService) { // $scope: any,\n        //this.$scope = $scope;\n        this.portalService = portalService;\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    //$scope: any;\n    portalService: PortalService;\n\n    windowResizeHandler: () => void;\n\n    statusBar: string = '';\n    statusBarClass: string = '';\n\n    // #endregion\n\n    // #region Methods\n\n    /** angular1: $onInit(), $onChanges(changesObj), $doCheck(), $onDestroy(), $postLink() */\n    $onDestroy() {\n        this.removeWindowResizeListener();\n    }\n\n    /** angular2: ngOnChanges(), ngOnInit, ngDoCheck, ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy */\n    ngOnDestroy() {\n        this.removeWindowResizeListener();\n    }\n\n    /** Override */\n    onActivate(): void {\n    }\n\n    /** Override */\n    onActivated(): void {\n    }\n\n    private removeWindowResizeListener() {\n        if (this.windowResizeHandler !== undefined) {\n            this.portalService.$window.removeEventListener('resize', this.windowResizeHandler);\n        }\n    }\n\n    setupWindowResizeListener(callback: () => void) {\n        // http://stackoverflow.com/questions/4298612/jquery-how-to-call-resize-event-only-once-its-finished-resizing\n        let id: number;\n\n        window.addEventListener('resize', this.windowResizeHandler = () => {\n            clearTimeout(id);\n            id = setTimeout(() => { callback(); }, 50);\n        });\n    }\n\n    isNumberUndefinedNullOr0(value: number): boolean {\n        if (value && value > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isObjectNullUndefinedOrEmpty(value: object): boolean {\n        if (value == null) { return true; }\n        if (value == undefined) { return true; }\n        if (value && Object.keys(value).length > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isStringNullOrEmpty(value: string): boolean {\n        if (value && value.replace(' ', '').length > 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    getRandomString(length: number = 20) {\n        return 'a' + Math.round((Math.pow(36, length + 1) - Math.random() * Math.pow(36, length))).toString(36).replace('.', '').replace('(e+', '').replace(')', '').slice(1);\n    }\n\n    // #region Set StatusBar\n\n    clearStatusBar() {\n        this.statusBar = '';\n        this.statusBarClass = '';\n    }\n\n    setStatusBar(text?: string, style?: string) {\n        this.statusBar = text ? text : '';\n        this.statusBarClass = style ? style : '';\n    }\n\n    setStatusBarCopyData() {\n        this.statusBar = 'Daten kopieren...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarLoadData() {\n        this.statusBar = 'Daten laden...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarSaveData() {\n        this.statusBar = 'Daten speichern...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarDeleteData() {\n        this.statusBar = 'Daten lÃÆÃâÃâ Ã¢â¬â¢ÃÆÃ¢â¬Â ÃÂ¢Ã¢âÂ¬Ã¢âÂ¢ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬ÃÂ¢Ã¢â¬Å¾ÃÂ¢ÃÆÃâÃâ Ã¢â¬â¢ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬Ãâ¦ÃÂ¡ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ¡ÃÆÃ¢â¬Å¡ÃâÃÂ¶schen...';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarDeleteDataCanceled() {\n        this.statusBar = 'LÃÆÃâÃâ Ã¢â¬â¢ÃÆÃ¢â¬Â ÃÂ¢Ã¢âÂ¬Ã¢âÂ¢ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬ÃÂ¢Ã¢â¬Å¾ÃÂ¢ÃÆÃâÃâ Ã¢â¬â¢ÃÆÃÂ¢ÃÂ¢Ã¢â¬Å¡ÃÂ¬Ãâ¦ÃÂ¡ÃÆÃâÃÂ¢Ã¢âÂ¬ÃÂ¡ÃÆÃ¢â¬Å¡ÃâÃÂ¶schen abgebrochen.';\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarInfo(text: string) {\n        this.statusBar = text;\n        this.statusBarClass = 'apa-statusbar-info';\n    }\n\n    setStatusBarError(text: string) {\n        this.statusBar = text;\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    setStatusBarNoDataFound() {\n        this.statusBar = 'Keine Daten gefunden!';\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    setStatusBarException(exception: Exception) {\n        this.statusBar = Exception.getOneLineMessage(exception);\n        this.statusBarClass = 'apa-statusbar-error';\n    }\n\n    // #endregion\n\n    // #endregion\n}\n","import { PortalService } from './portal-service';\nimport { UserAccount } from './user-account';\nimport { UserControlBase } from './user-control-base';\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\nimport { timeout } from 'q';\r\n\nexport class Blade extends UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService, path: string, title: string, subtitle: string = '', width: number = 200) {//$scope: any,\n        super(portalService); //$scope,\n\n        this.vm = this;\n        this.path = path;\n        this.title = title;\n        this.subTitle = subtitle;\n        this.width.width = width + 'px';\n        this.widthStackLayout.width = width - 50 + 'px';  // 50 = padding (left and right)\n\n        if (!portalService) { throw new Error('[Blade] constructor parameter \\'portalService\\' must be provided.'); }\n        if (!path) { throw new Error('[Blade] constructor parameter \\'path\\' must be a string.'); }\n        if (!title && title !== '') { throw new Error('[Blade] constructor parameter \\'title\\' must be a string when provided.'); }\n        if (!subtitle && subtitle !== '') { throw new Error('[Blade] constructor parameter \\'subtitle\\' must be a string when provided.'); }\n        if (!width && width !== 0) { throw new Error('[Blade] constructor parameter \\'width\\' must be a number when provided.'); }\n\n        if (width < 50) { throw new Error('[Blade] constructor parameter \\'width\\' must be at least 50.'); }\n\n        // Set 'this.portalService.areaBlades.blades[index]' to 'this'\n        //     'this.portalService.areaBlades.blades[index]' was generated during AddBlade\n        this.portalService.areaBlades.blades.forEach((blade, index) => {\n            if (blade.path != null && this.path != null && blade.path.toLowerCase() === this.path.toLowerCase()) {\n                this.portalService.areaBlades.blades[index] = this;\n            }\n        });\n\n        this.setupWindowResizeListener(() => { this.setBladeHeights(); });\n        this.setBladeHeights();\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    /** HACK: 2016-11-06/hp\n    [angular-portal-blade] needs [this] as the controller.\n    We don't know how to provide [this] to the directive.\n    So we came up with this [vm] property.*/\n    vm: any = {};\n\n    // Indicates if maximize icon is shown\n    // TODO: 2019-09-26/hp: it probably should be named isMaximizedShown\n    isMaximize: boolean = false;\n\n    // TODO: 2019-09-26/hp: not sure what that is, checkout\n    isCommandMore: boolean = false;\n\n    // Indicates if this is a navigation blade\n    isNav: boolean = false;\n\n    // Indicates if this is a navigation grid blade\n    isGrid: boolean = false;\n\n    visibility: string = 'collapse';\n\n    private watcherTitle: () => void;\n\n    bladeContentHeight: number;\n    bladeContentHeightInner: number;\n\n    title: string = '';\n    subTitle: string = '';\n    width = { 'width': '0' };\n    widthStackLayout = { 'width': '50px' };\n\n    isInnerHtml: boolean = true;\n\n    formblade: any; // angular.IFormController; // name of the ng-form directive\n\n    // #region path\n\n    private _path: string;\n    get path(): string {\n        return this._path;\n    }\n    // For the moment we do distinguish between lower and upper case path name\n    set path(newPath: string) {\n        if (newPath == null) { return; }\n        this._path = newPath.toLowerCase();\n    }\n\n    // #endregion\n\n    // #endregion\n\n    // #region Commands\n\n    isCommandBrowse: boolean = false;\n    isCommandBrowseEnabled: boolean = true;\n    commandBrowse: () => void = () => { this.onCommandBrowse(); };\n    commandBrowseText: string = '';\n\n    isCommandCancel: boolean = false;\n    isCommandCancelEnabled: boolean = true;\n    commandCancel: () => void = () => { this.onCommandCancel(); };\n    commandCancelText: string = '';\n\n    isCommandCopy: boolean = false;\n    isCommandCopyEnabled: boolean = true;\n    commandCopy: () => void = () => { this.onCommandCopy(); };\n    commandCopyText: string = '';\n\n    isCommandDelete: boolean = false;\n    isCommandDeleteEnabled: boolean = true;\n    commandDelete: () => void = () => { this.onCommandDelete(); };\n    commandDeleteText: string = '';\n\n    isCommandDocument: boolean = false;\n    isCommandDocumentEnabled: boolean = true;\n    commandDocument: () => void = () => { this.onCommandDocument(); };\n    commandDocumentText: string = '';\n\n    isCommandDocument2: boolean = false;\n    isCommandDocument2Enabled: boolean = true;\n    commandDocument2: () => void = () => { this.onCommandDocument2(); };\n    commandDocument2Text: string = '';\n\n    isCommandDocument3: boolean = false;\n    isCommandDocument3Enabled: boolean = true;\n    commandDocument3: () => void = () => { this.onCommandDocument3(); };\n    commandDocument3Text: string = '';\n\n    isCommandDocument4: boolean = false;\n    isCommandDocument4Enabled: boolean = true;\n    commandDocument4: () => void = () => { this.onCommandDocument4(); };\n    commandDocument4Text: string = '';\n\n    isCommandDocument5: boolean = false;\n    isCommandDocument5Enabled: boolean = true;\n    commandDocument5: () => void = () => { this.onCommandDocument5(); };\n    commandDocument5Text: string = '';\n\n    isCommandNew: boolean = false;\n    isCommandNewEnabled: boolean = true;\n    commandNew: () => void = () => { this.onCommandNew(); };\n    commandNewText: string = '';\n\n    isCommandOrder: boolean = false;\n    isCommandOrderEnabled: boolean = true;\n    commandOrder: () => void = () => { this.onCommandOrder(); };\n    commandOrderText: string = '';\n\n    isCommandRestart: boolean = false;\n    isCommandRestartEnabled: boolean = true;\n    commandRestart: () => void = () => { this.onCommandRestart(); };\n    commandRestartText: string = '';\n\n    isCommandSave: boolean = false;\n    isCommandSaveEnabled: boolean = true;\n    commandSave: () => void = () => { this.onCommandSave(); };\n    commandSaveText: string = '';\n\n    isCommandSearch: boolean = false;\n    isCommandSearchEnabled: boolean = true;\n    commandSearch: () => void = () => { this.onCommandSearch(); };\n    commandSearchText: string = '';\n\n    isCommandStart: boolean = false;\n    isCommandStartEnabled: boolean = true;\n    commandStart: () => void = () => { this.onCommandStart(); };\n    commandStartText: string = '';\n\n    isCommandStop: boolean = false;\n    isCommandStopEnabled: boolean = true;\n    commandStop: () => void = () => { this.onCommandStop(); };\n    commandStopText: string = '';\n\n    isCommandSwap: boolean = false;\n    isCommandSwapEnabled: boolean = true;\n    commandSwap: () => void = () => { this.onCommandSwap(); };\n    commandSwapText: string = '';\n\n    isCommandExcel: boolean = false;\n    isCommandExcelEnabled: boolean = true;\n    commandExcel: () => void = () => { this.onCommandExcel(); };\n    commandExcelText: string = '';\n\n    // #endregion\n\n    // #region Methods\n\n    activate(): void {\n        this.onActivate();\n        this.onActivated();\n    }\n\n    navigateTo(path: any) {\n        this.onNavigateTo(path);\n    }\n\n    /** Must be overridden. */\n    onNavigateTo(value: any): void {\n        throw new Error('[Blade] \\'onNavigateTo\\' is an abstract function. Define one in the derived class.');\n    }\n\n    // At the moment we do not distinguish between lower and upper case path name\n    comparePaths(path1: string, path2: string): boolean {\n        if (path1 == null) { return false; }\n        if (path2 == null) { return false; }\n        if (path1.toLowerCase() === path2.toLowerCase()) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /** close blade. */\n    close() {\n        if (!this.onClose) {\n            return; // do not close blade\n        }\n\n        if (this.portalService.areaBlades !== undefined) {\n            this.portalService.areaBlades.clearPath(this.path);\n        } else {\n            throw new Error('[Blade] path: \\'' + this.path + '\\' could not be removed, since no \\'this.portalService.areaBlades\\' available.');\n        }\n    }\n\n    /** Override */\n    onClose(): boolean {\n        return true;\n    }\n\n    // #region Commands\n\n    onCommandBrowse(): void {\n        throw new Error('[Blade] \\'onCommandBrowse\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandCancel(): void {\n        throw new Error('[Blade] \\'onCommandCancel\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandCopy(): void {\n        throw new Error('[Blade] \\'onCommandCopy\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDelete(): void {\n        throw new Error('[Blade] \\'onCommandDelete\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument(): void {\n        throw new Error('[Blade] \\'onCommandDocument\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument2(): void {\n        throw new Error('[Blade] \\'onCommandDocument2\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument3(): void {\n        throw new Error('[Blade] \\'onCommandDocument3\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument4(): void {\n        throw new Error('[Blade] \\'onCommandDocument4\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandDocument5(): void {\n        throw new Error('[Blade] \\'onCommandDocument5\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandNew(): void {\n        throw new Error('[Blade] \\'onCommandNew\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandOrder(): void {\n        throw new Error('[Blade] \\'onCommandOrder\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandRestart(): void {\n        throw new Error('[Blade] \\'onCommandRestart\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSave(): void {\n        throw new Error('[Blade] \\'onCommandSave\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSearch(): void {\n        throw new Error('[Blade] \\'onCommandSearch\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandStart(): void {\n        throw new Error('[Blade] \\'onCommandStart\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandStop(): void {\n        throw new Error('[Blade] \\'onCommandStop\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandSwap(): void {\n        throw new Error('[Blade] \\'onCommandSwap\\' is an abstract function. Define one in the derived class.');\n    }\n\n    onCommandExcel(): void {\n        throw new Error('[Blade] \\'onCommandExcel\\' is an abstract function. Define one in the derived class.');\n    }\n\n    // #endregion\n\n    // #endregion\n\n    /** Change title, as soon as watchExpression changes. watchExpression is either a variable ore an expression, e.g. [name1 + name2] */\n    setTitle(watchExpression: string, func: () => void) {\n        console.log('commented code at : Blade.setTitle');\n        //if (this.watcherTitle === undefined) {\n        //    if (this.$scope !== null) {\n        //        // angular1\n        //        this.watcherTitle = this.$scope.$watch(watchExpression, () => { func(); });\n        //        this.$scope.$on('$destroy', () => { this.watcherTitle(); });\n        //    } else {\n        //        // angular2\n        //        console.log('[Blade.setTitle()] not supported for angular2. use [ngOnChanges] instead.');\n        //    }\n        //}\n    }\n\n    private setBladeHeights(): void {\n        this.bladeContentHeight = window.innerHeight - 40 - 125; // 40 = topbar, 125 = blade header\n        this.bladeContentHeightInner = this.bladeContentHeight - 50 - 3; // 50 = padding (top and bottom), somehow we miss 3px\n\n        // this.portalService.$timeout(() => { }, 50);\n        //window.setTimeout(() => { }, 50);\n    }\n}\n","import { Input } from '@angular/core';\r\n\nimport { PortalService } from './portal-service';\nimport { Tiles } from './tiles';\nimport { UserControlBase } from './user-control-base';\nimport { Blade } from './blade';\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\n\nexport class AreaBlades extends UserControlBase {\n    // #region Constructor\n\n    //static $inject = ['$scope', 'portalService'];\n    constructor(portalService: PortalService) { // $scope: any,\n        super(portalService); // $scope,\n\n        this.portalScroll = window.document.getElementById('apa-portal-scroll');\n\n        this.setupWindowResizeListener(() => { this.setPortalScrollCss(); });\n\n        this.blades = [];\n    }\n\n    // #endregion\n\n    // #region Properties\n\n    private portalScroll: HTMLElement;\n\n    private addBladeListener: () => void;\n    private areaNotificationShowListener: () => void;\n    private areaNotificationHideListener: () => void;\n\n    blades: Array<Blade> = new Array<Blade>();\n\n    // #endregion\n\n    // #region Methods\n\n    raiseBladeOnActivateEvent(args: IAddBladeEventArgs) {\n        let isEventRaised: boolean = false;\n\n        this.blades.forEach((blade) => {\n            if (blade.path.toLowerCase() === args.path.toLowerCase()) {\n                // Raise event onActivate\n                blade.onActivate();\n                isEventRaised = true;\n                return;\n            }\n        });\n    }\n\n    raiseAddBladeEvent(args: IAddBladeEventArgs) {\n        let isBladeAlreadyShown: boolean = false;\n        this.blades.forEach((blade) => {\n            if (blade.path.toLowerCase() === args.path.toLowerCase()) {\n                // Blade is already shown, just activate it again\n                blade.onActivate();\n                isBladeAlreadyShown = true;\n                return;\n            }\n        });\n\n        if (!isBladeAlreadyShown) {\n            // Add the blade, since it is not yet shown\n            this.portalService.areaBlades.addBlade(args.path, args.pathSender);\n            //this.portalService.$rootScope.$broadcast('AreaBlades.AddBlade', args);\n        }\n    }\n\n    setFirstBlade(path: string): Blade | void {\n        this.clearAll();\n        this.hidePanorama();\n        return this.addBlade(path);\n    }\n\n    addBlade(path: string, senderPath: string = ''): Blade | void {\n        if (path == null) { return; }\n        if (senderPath == null) { return; }\n        let portalcontent: HTMLElement = null;\n\n        console.log('commented code at : AreaBlades.addBlade (analytics)');\n        // this.portalService.$analytics.pageTrack(path.toLowerCase());\n\n        path = path.toLowerCase();\n        senderPath = senderPath.toLowerCase();\n\n        // #region Verify\n\n        if (path === undefined || path === '') { return; }\n\n        if (this.portalService.$window !== undefined) {\n            if (this.portalService.$window.document === undefined) {\n                throw new Error('[AreaBlades] \\'this.$window.document\\' undefined.');\n            }\n\n            portalcontent = this.portalService.$window.document.getElementById('apa-portal-scroll');\n            if (portalcontent === null) {\n                throw new Error('[AreaBlades] HTML element with ID [apa-portal-scroll] not found. Maybe it is to early to call function \\'BladeArea.addBlade\\'.');\n            }\n        }\n\n        // #endregion\n\n        // #region Clear all children of the parent path\n\n        this.clearChild(senderPath);\n\n        // #endregion\n\n        // #region Make sure the blade is not yet show\n\n        this.blades.forEach((blade) => {\n            // we do not distinguish between lower and upper case path name\n            if (blade.comparePaths(blade.path, path)) {\n                throw new Error('[AreaBlades] path: \\'' + path + '\\' will not be added. It is already added.');\n            }\n        });\n\n        // #endregion\n\n        // #region Show the blade\n\n        let blade = new Blade(this.portalService, path, ''); // this.$scope,\n        this.blades.push(blade);\n\n        // #endregion\n\n        // #region Position the blade\n\n        if (this.portalService.$window !== undefined) {\n            this.portalService.$window.setTimeout(() => {\n                let azureportalblades = this.portalService.$window.document.getElementsByClassName('azureportalblade');\n\n                let i = this.blades.length - 1;\n\n                // HACK: Sometime azureportalblades[i].offsetLeft is undefined.\n                //       So now if it is, the user has to scroll on its own.\n                if (azureportalblades[i] !== undefined && (<any>azureportalblades[i]).offsetLeft !== undefined) {\n                    let sl = (<any>azureportalblades[i]).offsetLeft - 30;\n                    portalcontent.scrollLeft = sl;\n                }\n            }, 250);\n        }\n\n        // #endregion\n\n        return blade;\n    }\n\n    clearAll(): void {\n        this.blades.length = 0;\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearPath(path: string): void {\n        // we do not distinguish between lower and upper case path name\n        path = path.toLowerCase();\n\n        let isremoved = this.blades.some((blade, index) => {\n            if (blade.comparePaths(blade.path, path)) {\n                this.blades.length = index;\n                return true;\n            }\n        });\n\n        if (!isremoved && this.portalService.areaNotification.path === path) {\n            this.portalService.areaNotification.hide();\n            isremoved = true;\n        }\n\n        if (!isremoved) {\n            throw new Error('[AreaBlades.clearPath] path: \\'' + path + '\\' could not be removed, since path not found in bladeUrls.');\n        }\n\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearLevel(level: number) {\n        if (this.blades.length < level) {\n            throw new Error('[AreaBlades] level: \\'' + level + '\\' could not be cleard, since only \\'' + this.blades.length + '\\' available.');\n        }\n\n        if (level === 0) { level = 1; }\n        this.blades.length = level - 1;\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearLastLevel() {\n        this.clearLevel(this.blades.length);\n        this.showPanoramaIfNoBlades();\n    }\n\n    clearChild(path: string): void {\n        path = path.toLowerCase();\n\n        if (path === '') {\n            return;\n        }\n        let isremoved = this.blades.some((blade, index) => {\n            // we do not distinguish between lower and upper case path name\n            if (blade.comparePaths(blade.path, path)) {\n                this.blades.length = index + 1;\n                return true;\n            }\n        });\n        if (!isremoved) {\n            throw new Error('[AreaBlades.clearChild] path: \\'' + path + '\\' could not be removed, since path not found in bladeUrls.');\n        }\n    }\n\n    showPanoramaIfNoBlades() {\n        if (this.blades.length === 0) {\n            if (this.portalService.panorama !== undefined) {\n                {\n                    console.log('showPanoramaIfNoBlades');\n                    console.log({ a: this.portalService.panorama.isVisible });\n                    console.log({ a: this.portalService.panorama.startboard.tiles.showTiles });\n                    this.portalService.panorama.isVisible = true;\n                    this.portalService.panorama.startboard.tiles.showTiles = true;\n                    console.log({ a: this.portalService.panorama.isVisible });\n                    console.log({ a: this.portalService.panorama.startboard.tiles.showTiles });\n                }\n            }\n        }\n    }\n\n    hidePanorama() {\n        if (this.portalService.panorama !== undefined) {\n            console.log('hidePanorama');\n            console.log({ a: this.portalService.panorama.isVisible });\n            console.log({ a: this.portalService.panorama.startboard.tiles.showTiles });\n            this.portalService.panorama.isVisible = false;\n            this.portalService.panorama.startboard.tiles.showTiles = false;\n\n            console.log((<any>Object).id(this));\n            console.log((<any>Object).id(this.portalService));\n            console.log((<any>Object).id(this.portalService.panorama));\n            console.log((<any>Object).id(this.portalService.panorama.startboard));\n            console.log((<any>Object).id(this.portalService.panorama.startboard.tiles));\n\n            console.log({ a: this.portalService.panorama.isVisible });\n            console.log({ a: this.portalService.panorama.startboard.tiles.showTiles });\n        }\n    }\n\n    /** We need to call this when AreaBlades is no longer used, otherwise the listener does not get removed. */\n    close() {\n        // Unregister Listeners\n        this.addBladeListener();\n        this.areaNotificationShowListener();\n        this.areaNotificationHideListener();\n    }\n\n    // #endregion\n\n    setPortalScrollCss() {\n        if (this.portalScroll != null && this.portalService.areaNotification != null) {\n            this.portalScroll.style.marginRight = this.portalService.areaNotification.widthAreaUsed + 'px';\n        }\r\n    }\n}\n\n// angular.module('angularportalazure').service('areaBlades', AreaBlades);\n","import { Input } from '@angular/core';\r\n\r\nimport { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { BladeData } from './blade-data';\r\nimport { BladeNavItem } from './blade-nav-item';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\n\r\n\r\nexport class AreaNotification extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n\r\n        this.areaNotification = window.document.getElementById('apa-notification-area');\r\n\r\n        this.hide();\r\n        this.setupWindowResizeListener(() => { this.calcualteCssStyles(); });\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    path: string = '';\r\n    widthAreaUsed: number = 0;\r\n\r\n    private areaNotification: HTMLElement;\r\n\r\n    private _width: number = 250;\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n    set width(value: number) {\r\n        this._width = value;\r\n        this.calcualteCssStyles();\r\n    }\r\n\r\n    private _backgroundColor: string = '#32383f';\r\n    get backgroundColor(): string {\r\n        return this._backgroundColor;\r\n    }\r\n    set backgroundColor(value: string) {\r\n        this._backgroundColor = value;\r\n        this.calcualteCssStyles();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    hide() {\r\n        // Do not hide on false\r\n        if (!this.onHide) {\r\n            return;\r\n        }\r\n\r\n        this.path = '';\r\n        this.widthAreaUsed = 0;\r\n        if (this.areaNotification != null) { this.areaNotification.style.display = 'none' };\r\n\r\n        this.portalService.areaBlades.setPortalScrollCss();\r\n        //this.portalService.$rootScope.$broadcast('AreaNotification.Hide');\r\n    }\r\n\r\n    show(width: number = 250) {\r\n        this.onShow();\r\n        this.width = width;\r\n        this.widthAreaUsed = 1; // Indicate to the calcualteCssStyles function, that we need to set this value\r\n        this.calcualteCssStyles();\r\n        if (this.areaNotification != null) { this.areaNotification.style.display = 'inline-block' };\r\n\r\n        console.log('commented code at : AreaNotification.show');\r\n        this.portalService.areaBlades.setPortalScrollCss()\r\n        //this.portalService.$rootScope.$broadcast('AreaNotification.Show');\r\n        this.onShowed();\r\n    }\r\n\r\n    /* Override */\r\n    onHide(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /* Override */\r\n    onShow() {\r\n    }\r\n\r\n    /* Override */\r\n    onShowed() {\r\n    }\r\n\r\n    private calcualteCssStyles() {\r\n        this.areaNotification = window.document.getElementById('apa-notification-area');\r\n\r\n        this.areaNotification.style.position = 'absolute';\r\n        this.areaNotification.style.top = '0';\r\n        this.areaNotification.style.height = '100%';\r\n        this.areaNotification.style.backgroundColor = this.backgroundColor;\r\n        this.areaNotification.style.borderLeft = '2px solid gray';\r\n        this.areaNotification.style.width = this.width + 'px';\r\n        this.areaNotification.style.left = this.portalService.$window.innerWidth - this.width + 'px';\r\n\r\n        if (this.widthAreaUsed !== 0) {\r\n            this.widthAreaUsed = this.width;\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","export class UserAccount {\r\n    // #region Constructor\r\n\r\n    constructor(username: string, firstName: string = '', lastName: string = '') {\r\n        this.userName = username;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    // #region firstName\r\n\r\n    private _firstName: string;\r\n    get firstName(): string {\r\n        return this._firstName;\r\n    }\r\n    set firstName(value: string) {\r\n        this._firstName = value;\r\n        this._name = (this._firstName || '') + ' ' + (this._lastName || '');\r\n    }\r\n    // #endregion\r\n\r\n    // #region lastName\r\n    private _lastName: string;\r\n    get lastName(): string {\r\n        return this._lastName;\r\n    }\r\n    set lastName(value: string) {\r\n        this._lastName = value;\r\n        this._name = (this._firstName || '') + ' ' + (this._lastName || '');\r\n    }\r\n    // #endregion\r\n\r\n    // #region name\r\n    private _name: string;\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n    set name(value: string) {\r\n        throw new Error('[UserAccount] \\'name\\' is a calculated value from \\'firsName\\' and \\'lastName\\'. Assignment not allowed.');\r\n    }\r\n    // #endregion\r\n\r\n    userName: string;\r\n    emailAddress: string;\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { BladeData } from './blade-data';\r\nimport { BladeNavItem } from './blade-nav-item';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\nimport { UserAccount } from './user-account';\r\n\r\n\r\nexport class AvatarMenu extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n\r\n        this.userAccount = new UserAccount('demo@apa.org', 'demo', 'apa');\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    userAccount: UserAccount | null;\r\n\r\n    // #endregion\r\n}\r\n","/** The names are used in CSS for layouting, e.g. style='mini' */\nexport enum TileSizes {\n    small,\n    mini,\n    normal,\n    herowide\n}\n","import { TileSizes } from './tile-sizes';\r\n\r\nexport class TileSize {\r\n    // #region Constructor\r\n\r\n    constructor(public tileSizes: TileSizes, public width: number, public height: number) {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    static getTileSizes(): Array<TileSize> {\r\n        let tileSizes = Array<TileSize>();\r\n\r\n        tileSizes.push(new TileSize(TileSizes.small, 90, 90));\r\n        tileSizes.push(new TileSize(TileSizes.mini, 180, 90));\r\n        tileSizes.push(new TileSize(TileSizes.normal, 180, 180));\r\n        tileSizes.push(new TileSize(TileSizes.herowide, 540, 360));\r\n\r\n        return tileSizes;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Tile } from './tile';\r\nimport { TileSize } from './tile-size';\r\nimport { TileSizes } from './tile-sizes';\r\n\r\nexport class Tiles {\r\n    // #region Properties\r\n\r\n    showTiles: boolean = true;\r\n    tiles: Array<any> = new Array<any>();\r\n    isTilesLoaded: boolean = false;\r\n    hideTileIfOnlyOne: boolean = true;  // not yet evaluated in HTML, but this is the standard behavior\r\n\r\n    private tileSizes = TileSize.getTileSizes();\r\n    private nextLeft: number = 0;\r\n    private nextTop: number = 0;\r\n    private columnHeightMax: number = 0;\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    addTile(tile: Tile): Tile {\r\n        this.isTilesLoaded = true;\r\n        let tileSize = this.tileSizes[tile.tileSize];\r\n        tile.size = TileSizes[tile.tileSize];  // Get CSS Name\r\n\r\n        tile.top = this.nextTop + 'px';\r\n        tile.left = this.nextLeft + 'px';\r\n\r\n        this.nextLeft += tileSize.width;\r\n\r\n        if (tileSize.height > this.columnHeightMax) {\r\n            this.columnHeightMax = tileSize.height;\r\n        }\r\n\r\n        if (this.nextLeft > 540) {\r\n            this.nextLeft = 0;\r\n            this.nextTop += this.columnHeightMax;\r\n            this.columnHeightMax = 0;\r\n        }\r\n\r\n        this.tiles.push(tile);\r\n\r\n        return tile;\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\n\r\nexport class Startboard extends UserControlBase {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService) { // $scope: any,\r\n        super(portalService); // $scope,\r\n        this.tiles = new Tiles();\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    tiles: Tiles;\r\n\r\n    // #endregion\r\n}\r\n","import { PortalService } from './portal-service';\r\nimport { Tiles } from './tiles';\r\nimport { UserControlBase } from './user-control-base';\r\nimport { Blade } from './blade';\r\nimport { IAddBladeEventArgs } from './iadd-blade-event-args';\r\nimport { AvatarMenu } from './avatar-menu';\r\nimport { Startboard } from './startboard';\r\n\r\nexport class Panorama extends UserControlBase {\r\n    // #region Properties\r\n\r\n    title: string;\r\n    isVisible: boolean = true;\r\n\r\n    avatarMenu: AvatarMenu;\r\n    startboard: Startboard;\r\n\r\n    // #endregion\r\n\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$scope', 'portalService'];\r\n    constructor(portalService: PortalService, title: string) { // $scope: any,\r\n        super(portalService); // $scope,\r\n        this.title = title;\r\n        this.portalService.panorama = this;\r\n\r\n        this.avatarMenu = new AvatarMenu(this.portalService);\r\n        this.startboard = new Startboard(this.portalService);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { AppService } from '../service/app/app.service';\r\n\r\n\r\nimport { AreaBlades } from './area-blades';\r\nimport { AreaNotification } from './area-notification';\r\nimport { BladeParameter } from './blade-parameter';\r\nimport { Panorama } from './panorama';\r\nimport { PortalShell } from './portal-shell';\r\nimport { Angulartics2Module } from 'angulartics2';\r\nimport { Angulartics2GoogleAnalytics } from 'angulartics2/ga';\r\n\r\nexport class PortalService {\r\n    // #region Constructor\r\n\r\n    //static $inject = ['$injector'];\r\n    constructor() { // $injector: any, angulartics2GoogleAnalytics: Angulartics2GoogleAnalytics\r\n        console.log({ PortalService: (<any>Object).id(this) });\r\n        //this.$injector = $injector;\r\n\r\n        //this.$http = $injector.get('$http');\r\n        //this.$httpBackend = $injector.get('$httpBackend');\r\n        //this.$q = $injector.get('$q');\r\n        //this.$rootScope = $injector.get('$rootScope');\r\n        //this.$window = $injector.get('$window');\r\n        //this.$analytics = $injector.get('$analytics');\r\n        //this.$timeout = $injector.get('$timeout');\r\n        //this.$translate = $injector.get('$translate');\r\n\r\n        //this.ngDialog = <any>$injector.get('ngDialog');\r\n\r\n        this.areaBlades = new AreaBlades(this);\r\n        this.areaNotification = new AreaNotification(this);\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    appService: AppService;\r\n    parameter: BladeParameter = { action: 'none', itemId: 0 };\r\n    $analytics: Angulartics2GoogleAnalytics;\r\n\r\n    // #region ng.IModule properties\r\n\r\n    //animate;\r\n    //animation;\r\n    //component;\r\n    //config;\r\n    //constant;\r\n    //controller;\r\n    //directive;\r\n    //factory;\r\n    //filter;\r\n    //provider;\r\n    //run;\r\n    //service;\r\n    //value;\r\n    //decorator;\r\n    //name;\r\n    //requires;\r\n\r\n    // #endregion\r\n\r\n    // #region Visual components\r\n\r\n    portalShell: PortalShell;\r\n    panorama: Panorama = new Panorama(this, 'angular-portal-azure-module');\r\n    areaBlades: AreaBlades;\r\n    areaNotification: AreaNotification; // is created and set in 'home' directive\r\n\r\n    // #endregion\r\n\r\n    // #region NgDialogs\r\n\r\n    ngDialog: any; // any should be: angular.dialog.IDialogService;\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Services\r\n\r\n    $injector: any; // angular.auto.IInjectorService;\r\n    $http: any; // angular.IHttpService;\r\n    $httpBackend: any; // angular.IHttpBackendService;\r\n    $q: any; // angular.IQService;\r\n    $rootScope: any; // angular.IRootScopeService;\r\n    $window: any; // angular.IWindowService;\r\n    $timeout: any; // angular.ITimeoutService;\r\n    $translate: any; // angular.translate.ITranslateService;\r\n\r\n    // #endregion\r\n\r\n    // #endregion\r\n}\r\n\r\n// angular.module('angularportalazure').service('portalService', PortalService);\r\n","import { Blade } from './blade';\r\nimport { TileSizes } from './tile-sizes';\r\nimport { PortalService } from './portal-service';\r\n\r\nexport class Tile {\r\n    // #region Constructor\r\n\r\n    constructor(title: string, bladePath: string, portalService: PortalService) {\r\n        this.portalService = portalService;\r\n\r\n        this.title = title;\r\n        this.bladePath = bladePath;\r\n        this.tileSize = TileSizes.normal;\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    portalService: PortalService;\r\n\r\n    title: string;\r\n    subTitle: string;\r\n\r\n    // #region bladePath\r\n\r\n    get bladePath(): string {\r\n        return this._bladePath;\r\n    }\r\n    // For the moment we do not distinguish between lower and upper case path name\r\n    set bladePath(newBladePath: string) {\r\n        this._bladePath = newBladePath.toLowerCase();\r\n    }\r\n    private _bladePath: string;\r\n\r\n    // #endregion\r\n\r\n    tileSize: TileSizes;\r\n    size: string; // CSS style class name - refactoring: rename to cssClass\r\n\r\n    left: string; // Obsolete, use leftN\r\n    top: string; // Obsolete, use topN\r\n    leftN: string; // left position (CSS) - during refactoring, rename to left\r\n    topN: string; // top position (CSS) - during refactoring, rename to top\r\n\r\n    // #endregion\r\n\r\n    // #region Methods\r\n\r\n    clicked() {\r\n        this.portalService.areaBlades.setFirstBlade(this.bladePath);\r\n        this.portalService.appService.bladeService.navigateTo(this.bladePath);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router, Event, NavigationStart, NavigationEnd, NavigationError } from '@angular/router';\n\nimport { AppService } from '../../service/app/app.service';\n\nimport { PortalService } from '../../domain/portal-service';\nimport { AreaNotification } from '../../domain/area-notification';\nimport { AreaBlades } from '../../domain/area-blades';\nimport { Tile } from '../../domain/tile';\n\ninterface DinoThemes {\n    [name: string]: DinoTheme;\n}\n\ninterface DinoTheme {\n    '--topbar-color': string;\n    '--topbar-background-color': string;\n    '--topbar-home-color': string;\n    '--blade-statusbar-background-color': string;\n    '--blade-commands-background-color': string;\n}\n\n@Component({\n    selector: 'angular-portal-azure',\n    templateUrl: './app.component.html',\n    //styleUrls: ['./app.component.scss'] // build error: Unknown version 67 of android\n})\nexport class AppComponent implements OnInit {\n    readonly themeProps = [\n        'color-main',\n        'color-main-darken',\n        'color-main-darken2',\n        'color-main-lighten',\n        'color-accent',\n    ];\n\n    readonly themes: DinoThemes = {\n        'black': {\n            '--topbar-color': '#fff',\n            '--topbar-background-color': '#1c1c1c',\n            '--topbar-home-color': '#fff',\n            '--blade-statusbar-background-color': '#293644',\n            '--blade-commands-background-color': '#3e4045',\n        },\n        'white': {\n            '--topbar-color': '#1c1c1c',\n            '--topbar-background-color': '#efefef',\n            '--topbar-home-color': '#1c1c1c',\n            '--blade-statusbar-background-color': '#dcdcdc',\n            '--blade-commands-background-color': '#c7c7c7',\n        }\n    };\n\n    portalService: PortalService;\n    selectedTheme: DinoTheme = this.themes['black'];\n\n    constructor(public appService: AppService, private router: Router) {\n        console.log({ AppComponent: (<any>Object).id(this) });\n        this.portalService = new PortalService();\n        this.portalService.appService = this.appService;\n        this.portalService.areaNotification = new AreaNotification(this.portalService);\n        this.portalService.areaBlades = new AreaBlades(this.portalService);\n\n        this.appService.portalService = this.portalService;\n    }\n\n    ngOnInit() {\n        setTimeout(() => { this.appService.appConfigService.appConfig.isShowSplashScreen = false; }, 500);\n\n        // TODO:2019-09-27/hp: convert NEW API to OLD - Copy TILES\n        //                     refactor this.portalService.panorama.startboard.tiles\n        //                       to use this.appService.appConfigService.appConfig.appboard\n        this.appService.appConfigService.appConfig.appboard.forEach((item) => {\n            let tile = this.portalService.panorama.startboard.tiles.addTile(new Tile(item.title, item.routerPath, this.portalService));\n            tile.subTitle = item.subTitle;\n        });\n    }\n\n    setTheme(themeIndex: string) {\n        this.selectedTheme = this.themes[themeIndex];\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Blade } from '../../domain/blade';\nimport { PortalService } from '../../domain/portal-service';\r\n\n@Component({\n    selector: 'apa-blade',\n    templateUrl: './blade.component.html',\n    // styleUrls: ['./blade.component.scss'] // build error: Unknown version 67 of android\n})\nexport class BladeComponent extends Blade implements OnInit {\n    constructor(portalService: PortalService) {\n        super(portalService, 'blade1', '', '', 500)\r\n    }\n\n    ngOnInit() {\n    }\n\n    //close = () => { };\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'apa-grid',\n    templateUrl: './grid.component.html',\n    // styleUrls: ['./grid.component.scss'] // build error: Unknown version 67 of android\n})\nexport class GridComponent implements OnInit {\n\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'apa-nav',\n    templateUrl: './nav.component.html',\n    //styleUrls: ['./nav.component.scss'] // build error: Unknown version 67 of android\n})\nexport class NavComponent implements OnInit {\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { AppService } from '../../../service/app/app.service';\r\n\r\n@Component({\r\n    selector: 'ospa-appboard',\r\n    templateUrl: './appboard.component.html',\r\n    //styleUrls: ['./appboard.component.scss'] // build error: Unknown version 67 of android\r\n})\r\nexport class AppboardComponent implements OnInit {\r\n    // #region Constructors\r\n\r\n    constructor(public appService: AppService) { }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // #region Public Methods\r\n\r\n    navigateTo(routerPath): void {\r\n        this.appService.bladeService.navigateTo(routerPath);\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ospa-page-not-found',\n  templateUrl: './page-not-found.component.html',\n  //styleUrls: ['./page-not-found.component.scss'] // build error: Unknown version 67 of android\n})\nexport class PageNotFoundComponent implements OnInit {\n  constructor() { }\n\n  ngOnInit() {\n  }\n}\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { AppComponent } from './component/app/app.component';\r\nimport { AppboardComponent } from './component/dashboard/appboard/appboard.component';\r\nimport { PageNotFoundComponent } from './component/general/page-not-found/page-not-found.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: 'appboard', pathMatch: 'full' },\r\n    { path: 'appboard', component: AppComponent }, // AppboardComponent \r\n    { path: '**', component: PageNotFoundComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(routes) // , { enableTracing: true }\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n//import { MainOscService } from '@one-system/one-sys-core';\r\n\r\n@Component({\r\n    selector: 'ospa-splash-screen',\r\n    templateUrl: './splash-screen.component.html',\r\n    // styleUrls: ['./splash-screen.component.scss'] // build error: Unknown version 67 of android\r\n})\r\nexport class SplashScreenComponent implements OnInit {\r\n    //constructor(public mainOscService: MainOscService) { }\r\n    constructor(/*public mainOscService: MainOscService*/) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { Directive, OnInit, OnDestroy, Input, ComponentFactoryResolver, ViewContainerRef, ChangeDetectorRef } from \"@angular/core\";\r\nimport { RouterOutlet, ChildrenOutletContexts } from \"@angular/router\";\r\n\r\n// #region README\r\n\r\n// <router-outlet> does not yet support a [name] attribute, therefore we have implemented this. Usage:\r\n// <router-outlet-named [name]=\"name1\">\r\n\r\n// #endregion\r\n\r\n@Directive({\r\n    selector: 'router-outlet-named',\r\n    exportAs: 'outlet'\r\n})\r\nexport class RouterOutletNamedDirective implements OnInit, OnDestroy {\r\n    // #region Properties\r\n\r\n    public outlet: RouterOutlet;\r\n    @Input() public name: string;\r\n\r\n    // #endregion\r\n\r\n    // #region Properties\r\n\r\n    constructor(\r\n        private parentContexts: ChildrenOutletContexts,\r\n        private location: ViewContainerRef,\r\n        private resolver: ComponentFactoryResolver,\r\n        private changeDetector: ChangeDetectorRef,\r\n    ) { }\r\n\r\n    // #endregion\r\n\r\n    // #region Angular Methods\r\n\r\n    ngOnInit() {\r\n        this.outlet = new RouterOutlet(this.parentContexts, this.location, this.resolver, this.name, this.changeDetector);\r\n        this.outlet.ngOnInit();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.outlet) {\r\n            this.outlet.ngOnDestroy();\r\n        }\r\n    }\r\n\r\n    // #endregion\r\n}\r\n","\r\nimport { Directive, ElementRef, Input, OnChanges } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[theming]'\r\n})\r\nexport class ThemingDirective implements OnChanges {\r\n    @Input('theming') theme: { [prop: string]: string };\r\n\r\n    constructor(private el: ElementRef<HTMLElement>) {\r\n    }\r\n\r\n    ngOnChanges() {\r\n        Object.keys(this.theme).forEach(prop => {\r\n            this.el.nativeElement.style.setProperty(`${prop}`, this.theme[prop]);\r\n        });\r\n    }\r\n}\r\n","import { NgModule, Optional, SkipSelf, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppConfig } from './domain/app-config';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppboardComponent } from '../lib/component/dashboard/appboard/appboard.component';\nimport { PageNotFoundComponent } from '../lib/component/general/page-not-found/page-not-found.component';\nimport { SplashScreenComponent } from '../lib/component/general/splash-screen/splash-screen.component';\n\nimport { AppComponent } from './component/app/app.component';\nimport { NavComponent } from './component/nav/nav.component';\nimport { GridComponent } from './component/grid/grid.component';\nimport { BladeComponent } from './component/blade/blade.component';\n\nimport { BladeService } from './service/blade/blade.service';\nimport { PortalService } from './domain/portal-service';\nimport { BrowserService } from './service/browser/browser.service';\n\nimport { RouterOutletNamedDirective } from './directive/router-outlet-named/router-outlet-named.directive';\nimport { ThemingDirective } from './directive/theming/theming.directive';\n\n@NgModule({\n    declarations: [\n        // Component\n        AppboardComponent,\n        PageNotFoundComponent,\n        SplashScreenComponent,\n        AppComponent,\n        NavComponent,\n        GridComponent,\n        BladeComponent,\n        // Directives\n        RouterOutletNamedDirective,\n        ThemingDirective\n    ],\n    providers: [\n        PortalService,\n        BladeService,\n        BrowserService\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        AppRoutingModule // Should be last, since it contains the ** route\n    ],\n    exports: [\n        // Component\n        AppComponent,\n        PageNotFoundComponent,\n        SplashScreenComponent,\n        NavComponent,\n        GridComponent,\n        BladeComponent,\n        // Directives\n        RouterOutletNamedDirective,\n        ThemingDirective\n    ]\n})\nexport class AngularPortalAzureModule {\n    constructor(@Optional() @SkipSelf() parentModule: AngularPortalAzureModule) {\n        if (parentModule) {\n            throw new Error(\n                'OneSysCoreModule is already loaded. Import it in only in one AppModule.');\n        }\n    }\n\n    static forRoot(appConfig: AppConfig): ModuleWithProviders {\n        return {\n            ngModule: AngularPortalAzureModule,\n            providers: [\n                { provide: AppConfig, useValue: appConfig }\n            ]\n        };\n    }\n}\n"]}