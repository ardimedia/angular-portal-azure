describe("AzurePortalNg.AvatarMenu",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.AvatarMenu(t)}));it("Constructor successful",function(){expect(n).not.toBe(null);expect(n instanceof AzurePortalNg.AvatarMenu).toBe(!0)})});describe("AzurePortalNg.BladeArea",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.BladeArea(t)}));it("Constructor successful",function(){expect(n).not.toBe(null);expect(n.blades).not.toBe(null);expect(n.blades.length).toBe(0);expect(n.portalService).not.toBe(null);expect(n.portalService.bladeArea).not.toBe(null)});it("setFirstBlade - set first blade",function(){n.setFirstBlade("test-path");expect(n.blades.length).toBe(1)});it("addBlade - add a blade",function(){var t=n.addBlade("test-path");expect(t).not.toBe(null);expect(t instanceof AzurePortalNg.Blade).toBe(!0);expect(n.blades.length).toBe(1)});it("clearAll - clear all blades",function(){n.clearAll();expect(n.blades.length).toBe(0)});it("clearPath - path not found - throw exception",function(){var t=function(){n.clearPath("test-path")};expect(t).toThrow(new Error("[AzurePortalNg.BladeArea.clearPath] path: 'test-path' could not be removed, since path not found in bladeUrls."))});it("clearLevel - clear level = 0",function(){n.clearLevel(0);expect(n.blades.length).toBe(0)});it("clearLevel - clear level = 5",function(){var t=function(){n.clearLevel(5)};expect(n.blades.length).toBe(0)});it("clearLastLevel - clear last level",function(){n.clearLastLevel();expect(n.blades.length).toBe(0)})});describe("AzurePortalNg.BladeData",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.BladeData(t,"test-path","test-title")}));it("Constructor successful",function(){expect(n).not.toBe(null)})});describe("AzurePortalNg.BladeDetail",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.BladeData(t,"test-path","test-title")}));it("Constructor successful",function(){expect(!0).toBe(n!==null)})});describe("AzurePortalNg.BladeList",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.BladeList(t,"test-path","test-title")}));it("Constructor successful",function(){expect(!0).toBe(n!==null)});it("onFilter - find search string in an number",function(){var t=n.onFilter(55,"55");expect(t).toBe(!0)});it("onFilter - do not find search string in an number",function(){var t=n.onFilter(55,"51");expect(t).toBe(!1)});it("onFilter - do not find multiple search string in an number",function(){var t=n.onFilter(55,"51 5");expect(t).toBe(!1)});it("onFilter - find search string in an string",function(){var t=n.onFilter("55","55");expect(t).toBe(!0)});it("onFilter - do not find search string in an string",function(){var t=n.onFilter("55","51");expect(t).toBe(!1)});it("onFilter - find multiple search string in an string",function(){var t=n.onFilter("the house is blue","house blue");expect(t).toBe(!0)});it("onFilter - do not find multiple search string in an string",function(){var t=n.onFilter("the house is blue","house red");expect(t).toBe(!1)});it("onFilter - find search string in an object",function(){var t=n.onFilter({title:"test-title"},"test-title");expect(t).toBe(!0)});it("onFilter - do not find search string in an object",function(){var t=n.onFilter({title:"test-title"},"test-title-not-found");expect(t).toBe(!1)});it("onFilter - find multiple search string in an object",function(){var t=n.onFilter({title:"test-title",note:"blue"},"test-title blue");expect(t).toBe(!0)});it("onFilter - do not find multiple search string in an object",function(){var t=n.onFilter({title:"test-title",note:"blue"},"test-title red");expect(t).toBe(!1)})});describe("AzurePortalNg.Blade",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.Blade(t,"test-path","test-title")}));it("Constructor successful",function(){expect(n).not.toBe(null);expect(n.blade).not.toBe(null);expect(n.blade.title).toBe("test-title");expect(n.blade.subTitle).toBe("");expect(n.navGrid).not.toBe(null);expect(n.navGrid.portalService).not.toBe(null);expect(n.navGrid.items).not.toBe(null);expect(n.navGrid.items.length).toBe(0);expect(n.navGrid.navigateTo).not.toBe(null);expect(n.path).not.toBe(null);expect(n.title).toBe("test-title");expect(n.subTitle).toBe("");expect(n.width.width).toBe("200px");expect(n.widthStackLayout.width).toBe("150px");expect(n.isInnerHtml).toBe(!0);expect(n.statusbar).toBe("");expect(n.statusbarClass).toBe("");expect(n.isCommandBrowse).toBe(!1);expect(n.isCommandCancel).toBe(!1);expect(n.isCommandCopy).toBe(!1);expect(n.isCommandDelete).toBe(!1);expect(n.isCommandDocument).toBe(!1);expect(n.isCommandDocument2).toBe(!1);expect(n.isCommandDocument3).toBe(!1);expect(n.isCommandDocument4).toBe(!1);expect(n.isCommandDocument5).toBe(!1);expect(n.isCommandNew).toBe(!1);expect(n.isCommandOrder).toBe(!1);expect(n.isCommandRestart).toBe(!1);expect(n.isCommandSave).toBe(!1);expect(n.isCommandSearch).toBe(!1);expect(n.isCommandStart).toBe(!1);expect(n.isCommandStop).toBe(!1);expect(n.isCommandSwap).toBe(!1);expect(n.commandBrowse).not.toBe(null);expect(n.commandCancel).not.toBe(null);expect(n.commandCopy).not.toBe(null);expect(n.commandDelete).not.toBe(null);expect(n.commandDocument).not.toBe(null);expect(n.commandDocument2).not.toBe(null);expect(n.commandDocument3).not.toBe(null);expect(n.commandDocument4).not.toBe(null);expect(n.commandDocument5).not.toBe(null);expect(n.commandNew).not.toBe(null);expect(n.commandOrder).not.toBe(null);expect(n.commandRestart).not.toBe(null);expect(n.commandSave).not.toBe(null);expect(n.commandSearch).not.toBe(null);expect(n.commandStart).not.toBe(null);expect(n.commandStop).not.toBe(null);expect(n.commandSwap).not.toBe(null);expect(n.commandBrowseText).toBe("");expect(n.commandCancelText).toBe("");expect(n.commandCopyText).toBe("");expect(n.commandDeleteText).toBe("");expect(n.commandDocumentText).toBe("");expect(n.commandDocument2Text).toBe("");expect(n.commandDocument3Text).toBe("");expect(n.commandDocument4Text).toBe("");expect(n.commandDocument5Text).toBe("");expect(n.commandNewText).toBe("");expect(n.commandOrderText).toBe("");expect(n.commandRestartText).toBe("");expect(n.commandSaveText).toBe("");expect(n.commandSearchText).toBe("");expect(n.commandStartText).toBe("");expect(n.commandStopText).toBe("");expect(n.commandSwapText).toBe("")});it("Constructor with parameter [width = 300] successful",function(){var n=new AzurePortalNg.Blade(t,"test-path","","",300);expect(n.widthStackLayout.width).toBe("250px")});it("Constructor with parameter [width => 50] throws no expection",function(){var n=new AzurePortalNg.Blade(t,"test-path","","",50);expect(n).not.toBe(null)});it("Constructor with parameter [width < 50] throws expection",function(){var n=function(){new AzurePortalNg.Blade(t,"test-path","","",49)};expect(n).toThrow()});it("activate successful",function(){n.activate();expect(n).not.toBe(null)});it("navigateTo throws expection - abstract function",function(){var t=function(){n.navigateTo("test-path")};expect(t).toThrow(new Error("[AzurePortalNg.Blade] 'onNavigateTo' is an abstract function. Define one in the derived class."))});it("close throws exception - path could not be removed",function(){var t=function(){n.close()};expect(t).toThrow(new Error("[AzurePortalNg.Blade] path: 'test-path' could not be removed, since no 'this.portalService.bladeArea' available."))})});describe("AzurePortalNg.Debug",function(){beforeEach(function(){Debug.isEnabled=!1;Debug.isWithObjects=!1;Debug.keys=[]});it("Constructor successful.",function(){var n=AzurePortalNg.Debug;expect(n.isEnabled).toBe(!1);expect(n.isWithObjects).toBe(!1);expect(typeof n.keys).toBe(typeof[]);expect(n.keys.length).toBe(0)});it("extractKey('[key1] abc') must return [key1]",function(){var n=AzurePortalNg.Debug,t=n.extractKey("[key1] abc");expect(t).toBe("[key1]")});it("extractKey('') must return an empty string",function(){var n=AzurePortalNg.Debug,t=n.extractKey("");expect(t).toBe("")});it("extractKey(' [key1] abc') must return an empty string",function(){var n=AzurePortalNg.Debug,t=n.extractKey(" [key1] abc");expect(t).toBe("")});it("extractKey('[key1 abc') must return an empty string",function(){var n=AzurePortalNg.Debug,t=n.extractKey("[key1 abc");expect(t).toBe("")});it("extractKey('key1] abc') must return an empty string",function(){var n=AzurePortalNg.Debug,t=n.extractKey("key1] abc");expect(t).toBe("")});it("enable('') must enable debugging with no keys",function(){var n=AzurePortalNg.Debug;n.enable("");expect(n.isEnabled).toBe(!0);expect(n.keys.length).toBe(0)});it("enable('[key1]') must enable debugging with key = '[key1]'",function(){var n=AzurePortalNg.Debug;n.enable("[key1]");expect(n.isEnabled).toBe(!0);expect(n.keys.length).toBe(1);expect(n.keys[0]).toBe("[key1]")});it("enable('[key1]') must enable debugging with key = '[key1]' and .enable('[key2]')",function(){var n=AzurePortalNg.Debug;n.enable("[key1]");n.enable("[key2]");expect(n.isEnabled).toBe(!0);expect(n.keys.length).toBe(2);expect(n.keys[0]).toBe("[key1]");expect(n.keys[1]).toBe("[key2]")});it("disable('') must disable debugging. No more keys are defined",function(){var n=AzurePortalNg.Debug;n.enable("");n.disable("");expect(n.isEnabled).toBe(!1);expect(n.keys.length).toBe(0)});it("disable('') must not disable debugging. Some keys are still defined",function(){var n=AzurePortalNg.Debug;n.enable("");n.enable("[key1]");n.disable("");expect(n.isEnabled).toBe(!0);expect(n.keys.length).toBe(1)});it("disable('[key1]') must disable debugging and remove key = '[key1]'. No more keys are defined",function(){var n=AzurePortalNg.Debug;n.enable("[key1]");n.disable("[key1]");expect(n.isEnabled).toBe(!1);expect(n.keys.length).toBe(0)});it("disable('[key1]') must not disable debugging but remove key = '[key1]'. Some keys are still defined",function(){var n=AzurePortalNg.Debug;n.enable("[key1]");n.enable("[key2]");n.disable("[key1]");expect(n.isEnabled).toBe(!0);expect(n.keys.length).toBe(1)});it("isInKeys('') will not be logged",function(){var n=AzurePortalNg.Debug,t;n.enable("");n.disable("");t=n.isInKeys("");expect(t).toBe(!1)});it("isInKeys('[key1]') will not be logged. No keys defined",function(){var n=AzurePortalNg.Debug,t;n.enable("");n.disable("");t=n.isInKeys("[key1]");expect(t).toBe(!1)});it("isInKeys('[key1]') will be logged. [key1] is defined",function(){var n=AzurePortalNg.Debug,t;n.enable("[key1]");n.disable("");t=n.isInKeys("[key1]");expect(t).toBe(!0)});it("write('') will not be logged in the console",function(){var n=AzurePortalNg.Debug,t;n.enable("");n.disable("");t=n.write("");expect(t).toBe(!1)});it("write('[key1] TestRunner test output') will be logged in the console",function(){var n=AzurePortalNg.Debug,t;n.enable("[key1]");n.disable("");t=n.write("[key1] TestRunner test output successfull");expect(t).toBe(!0)})});describe("AzurePortalNg.PortalService",function(){var n;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(t){n=t.get("azurePortalNg.portalService")}));it("Constructor successful",function(){expect(n).not.toBe(null);expect(n).not.toBe(undefined);expect(n instanceof AzurePortalNg.PortalService).toBe(!0);expect(n).not.toBe(undefined);expect(n.$httpBackend).not.toBe(undefined);expect(n.$injector).not.toBe(undefined);expect(n.$q).not.toBe(undefined);expect(n.$rootScope).not.toBe(undefined);expect(n.$window).not.toBe(undefined);expect(n.animation).toBe(undefined);expect(n.config).toBe(undefined);expect(n.constant).toBe(undefined);expect(n.controller).toBe(undefined);expect(n.decorator).toBe(undefined);expect(n.directive).toBe(undefined);expect(n.factory).toBe(undefined);expect(n.filter).toBe(undefined);expect(n.name).toBe(undefined);expect(n.provider).toBe(undefined);expect(n.requires).toBe(undefined);expect(n.run).toBe(undefined);expect(n.service).toBe(undefined);expect(n.value).toBe(undefined);expect(n.ngDialog).not.toBe(undefined);expect(n.bladeArea).toBe(undefined);expect(n.panorama).toBe(undefined);expect(n.portalShell).toBe(undefined)})});describe("AzurePortalNg.UserControlBase",function(){var n,t;beforeEach(angular.mock.module("azureportalng"));beforeEach(angular.mock.inject(function(i){t=i.get("azurePortalNg.portalService");n=new AzurePortalNg.UserControlBase(t)}));it("constructed successfully",function(){expect(n).not.toBe(null);expect(n.portalService).not.toBe(null)})});
